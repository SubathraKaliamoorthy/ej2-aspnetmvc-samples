@using Syncfusion.EJ2;
@using Syncfusion.EJ2.Charts
@section ControlsSection{
    <div class="col-lg-12 control-section" align="center">
        @(Html.EJS().Chart("container").Series(
           series =>
           {
               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.BoxAndWhisker).
               Name("Department").
               Marker(mr=>mr.Visible(true).Width(7).Height(7)).
               XName("Department").
               BoxPlotMode(Syncfusion.EJ2.Charts.BoxPlotMode.Normal).
               YName("Age").DataSource(ViewBag.ChartPoints).
               Add();
           }).PrimaryXAxis(
           xAxis =>
               xAxis.ValueType(Syncfusion.EJ2.Charts.ValueType.Category)
                    .Interval(1)
                    .MajorGridLines(mg=>mg.Width(0))
                    .MajorTickLines(mg => mg.Width(0))
           ).PrimaryYAxis(
           yAxis =>
               yAxis.Minimum(10).
               Maximum(60).
               Interval(10).
               Title("Age").
               MajorGridLines(mg => mg.Width(1)).
               MajorTickLines(mg => mg.Width(0)).LineStyle(ls=>ls.Width(0))
           ).Title("Employees Age Group in Various Departments").LegendSettings(
            legend => {
                legend.Visible(false);
            }).Tooltip(
           tooltip =>
           {
               tooltip.Enable(true).Header("");
           }).ChartArea(area => area.Border(br => br.Width(0))).Load("load").PointRender("labelRender").Render()
       )
    </div>

@*custom code start*@
<style>
    #control-container {
        padding: 0px !important;
    }
</style>
@*custom code end*@
    <script>    
        var materialColors = ['#00bdae', '#404041', '#357cd2', '#e56590', '#f8b883', '#70ad47', '#dd8abd', '#7f84e8', '#7bb4eb',
            '#ea7a57', '#404041', '#00bdae'];
        var fabricColors = ['#4472c4', '#ed7d31', '#ffc000', '#70ad47', '#5b9bd5',
            '#c1c1c1', '#6f6fe2', '#e269ae', '#9e480e', '#997300', '#4472c4', '#70ad47', '#ffc000', '#ed7d31'];
        var bootstrapColors = ['#a16ee5', '#f7ce69', '#55a5c2', '#7ddf1e', '#ff6ea6',
            '#7953ac', '#b99b4f', '#407c92', '#5ea716', '#b91c52'];
        var fluentColors = ['#1AC9E6', '#DA4CB2', '#EDBB40', '#AF4BCF', '#FF7266', '#1BD565', '#EE993D', '#5887FF', '#EC548D',
            '#7D39C0'];
        var fluentDarkColors = ['#1AC9E6', '#DA4CB2', '#EDBB40', '#AF4BCF', '#FF7266', '#1BD565', '#EE993D', '#5887FF', '#EC548D',
            '#7D39C0'];
        var pointTailwindColors = ["rgba(90, 97, 246, 0.5)", "rgba(101, 163, 13, 0.5)", "rgba(51, 65, 85, 0.5)", "rgba(20, 184, 166, 0.5)", "rgba(139, 92, 246, 0.5)", "rgba(3, 105, 161, 0.5)", "rgba(249, 115, 22, 0.5)",
            "rgba(147, 51, 234, 0.5)", "rgba(245, 158, 11, 0.5)", "rgba(21, 128, 61, 0.5)"];
        var pointTailwindDarkColors = ["#8B5CF6", "#22D3EE", "#F87171", "#4ADE80", "#E879F9", "#FCD34D", "#F97316", "#2DD4BF", "#F472B6", "#10B981"];
        var pointTailwind3Colors = ['#2F4074', '#03B4B4', '#0D72DE', '#FF5733', '#D63384', '#F39C12', '#EF291F', '#91C822', '#2F4074', '#03B4B4'];
        var pointTailwind3DarkColors = ['#8029F1', '#1ABC9C', '#0D72DE', '#FF5733', '#D63384', '#F39C12', '#EF291F', '#91C822', '#8029F1', '#1ABC9C'];
        var fluent2Colors = ["#6200EE", "#09AF74", "#0076E5", "#CB3587", "#E7910F", "#0364DE", "#66CD15", "#F3A93C", "#107C10", "#C19C00"];
        var fluent2HighContrastColors = ["#9BB449", "#2A72D5", "#43B786", "#3F579A", "#584EC6", "#E85F9C", "#6E7A89", "#EA6266", "#0B6A0B", "#C19C00"];
        var labelRender = function (args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';
            if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {
                args.fill = fabricColors[args.point.index % 10];
            }
            else if (selectedTheme === 'material') {
                args.fill = materialColors[args.point.index % 10];
            }
            else if (selectedTheme === 'fluent') {
                args.fill = fluentColors[args.point.index % 10];
            }
            else if (selectedTheme === 'fluent-dark') {
                args.fill = fluentDarkColors[args.point.index % 10];
            }
            else if (selectedTheme === 'fluent2') {
                args.fill = fluent2Colors[args.point.index % 10];
            }
            else if (selectedTheme === 'fluent2-highcontrast' || selectedTheme === 'fluent2-dark') {
                args.fill = fluent2HighContrastColors[args.point.index % 10];
            } else if (selectedTheme === 'tailwind3-dark') {
                args.fill = pointTailwind3DarkColors[args.point.index % 10];
            } else if (selectedTheme === 'tailwind3') {
                args.fill = pointTailwind3Colors[args.point.index % 10];
            } else {
                args.fill = bootstrapColors[args.point.index % 10];
            }
           // args.border.color = getSaturationColor(args.fill, -0.6);
        };

        var load = function (args) {
            var selectedTheme = themeName ? themeName : 'Fluent2';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast').replace(/5.3/i, '5');
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "75%";
            args.chart.primaryXAxis.labelIntersectAction = ej.base.Browser.isDevice ? 'None' : 'Rotate45';
            args.chart.primaryXAxis.labelRotation = ej.base.Browser.isDevice ? -45 : 0;
        };

        function valueChange() {
            var chart = document.getElementById("container").ej2_instances[0];
            var mode = document.getElementById("dropdown").ej2_instances[0];
                chart.series[0].boxPlotMode = mode.value;
                chart.series[0].animation.enable = false;
                chart.refresh();
            }
    </script>
}
@*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Box and Whisker in ASP.NET MVC Chart control. Explore here for more details."/>
                }
@*custom code end*@
@section ActionDescription{
    <p>
        This <a target="_blank" href="https://www.syncfusion.com/aspnet-mvc-ui-controls/charts/chart-types/box-and-whisker-chart" aria-label="ASP.NET MVC Box and Whisker Chart">ASP.NET MVC Box and Whisker Chart<span class="sr-only">opens in a new tab</span></a> example visualizes the employeeâ€™s age group in various departments of a company with box and whisker chart.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure a box and whisker chart or box plot. This chart is used to visualize a group of numerical data through their data quartiles. Box plots may also have lines extending vertically from the boxes (whiskers) indicating variability outside the upper and lower quartiles. <code>Marker</code> and <code>DataLabel</code> are used to represent individual data and its values.
    </p>
    <p>
        <code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover over a point or tap on a point in touch enabled devices.
    </p>
    <p>
        More information about the box and whisker series can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/chart/other-types" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
    </p>
}
@section Title{
                    <title>ASP.NET MVC Chart Box and Whisker Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Box and Whisker in ASP.NET MVC Chart Control</h1>
                }