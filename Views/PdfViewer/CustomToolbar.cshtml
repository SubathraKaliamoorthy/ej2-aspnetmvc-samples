@{
    ViewData["Title"] = "PdfViewer";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    string serviceUrl = VirtualPathUtility.ToAbsolute("~/api/PdfViewer/");

    string stampMenu = "#stampMenu";
    string SignatureToolbar = "#SignatureToolbar";
    string formFieldSignatureMenu = "#formFieldSignatureMenu";

}
@using Syncfusion.EJ2
@using Syncfusion.EJ2.Navigations
@using Syncfusion.EJ2.PdfViewer

@section ControlsSection{
    <div class="control-section">
        <div class="flex-container">
            <label class="switchLabel" for="checked">Standalone PDF Viewer</label>
            <div class="e-message render-mode-info">
                <span class="e-msg-icon render-mode-info-icon" title="Turn OFF to render the PDF Viewer as server-backed"></span>
            </div>
            @Html.EJS().Switch("checked").Checked(true).Change("change").CssClass("buttonSwitch").Render()
        </div>
        @Html.EJS().Toolbar("topToolbar").Height("56px").Items(new List<ToolbarItem> {
new ToolbarItem { Type = ItemType.Button, PrefixIcon = "e-icons e-folder",TooltipText = "Open",Align=ItemAlign.Left,Click="openFile"},
new ToolbarItem { Type = ItemType.Button,  PrefixIcon = "e-icons e-save" ,TooltipText = "Save",Align=ItemAlign.Left,Click="saveClicked"},
new ToolbarItem { Type = ItemType.Button, PrefixIcon = "e-icons e-chevron-left",TooltipText = "Previous Page",Align=ItemAlign.Center,Click="previousClicked",Id="previousPage"},
new ToolbarItem { Type = ItemType.Button, PrefixIcon = "e-icons e-chevron-right", TooltipText = "Next Page",Align=ItemAlign.Center,Click="nextClicked",Id="nextPage"},
new ToolbarItem {Template="<div class=''><input type='text' class='e-input-group e-pv-current-page-number' id='currentPage'/></div>" ,PrefixIcon = "e-pv-next-page-navigation-icon", TooltipText = "Page Number",Align=ItemAlign.Center},
new ToolbarItem { Type = ItemType.Input, Template="<div class='' style='margin:0px 6px'><span class='e-pv-total-page-number' id='totalPage'>of 0</span></div>" , PrefixIcon = "e-pv-next-page-navigation-icon", TooltipText = "Page Number",Click="currentPageClicked",Align=ItemAlign.Center},
new ToolbarItem {Type = ItemType.Separator , TooltipText="separator" ,Align=ItemAlign.Center},
new ToolbarItem { Type = ItemType.Button, PrefixIcon = "e-icons e-mouse-pointer", TooltipText = "Text Selection Tool",Align=ItemAlign.Center,Click="textSelection"},
new ToolbarItem{Type=ItemType.Button, PrefixIcon="e-icons e-pan", TooltipText="Pan Tool", Align=ItemAlign.Center,Click="panMode"},
new ToolbarItem {Type = ItemType.Separator , TooltipText="separator" ,Align=ItemAlign.Center},
new ToolbarItem{ Type= ItemType.Button ,PrefixIcon="e-icons e-annotation-edit", TooltipText="Edit Annotation",Align=ItemAlign.Center,Click="openEditAnnotation"},
new ToolbarItem {Type = ItemType.Separator , TooltipText="separator" ,Align=ItemAlign.Center},
new ToolbarItem{ Type= ItemType.Button ,PrefixIcon="e-icons e-split-vertical", TooltipText="Add and Edit Form Fields",Align=ItemAlign.Center,Click="addEditFormFields"},
new ToolbarItem { Type = ItemType.Button,  PrefixIcon = "e-icons e-search" ,TooltipText = "Search",Align=ItemAlign.Right,Click="findText"},
new ToolbarItem { Type = ItemType.Button,  PrefixIcon = "e-icons e-print" ,TooltipText = "Print",Align=ItemAlign.Right,Click="printClicked"},
}).Render()
        <div>
            @Html.EJS().Toolbar("editAnnotationToolbar").Height("50px").Items(new List<ToolbarItem>
            {
                new ToolbarItem{Type= ItemType.Button,PrefixIcon="e-icons e-highlight-color",TooltipText="Highlight", Align=ItemAlign.Center,Click="highlight"},
                new ToolbarItem{Type=ItemType.Button,PrefixIcon="e-icons e-underline",TooltipText="UnderLine",Align=ItemAlign.Center,Click="underLine"},
                new ToolbarItem{Type=ItemType.Button,PrefixIcon="e-icons e-strikethrough",TooltipText="StrikeThrough",Align=ItemAlign.Center,Click="strikeThrough"},
                new ToolbarItem{Type=ItemType.Button,PrefixIcon="e-icons e-squiggly",TooltipText="Squiggly",Align=ItemAlign.Center,Click="squiggly"},
                new ToolbarItem {Type = ItemType.Separator , TooltipText="separator" ,Align=ItemAlign.Center},
                new ToolbarItem{Type=ItemType.Button,PrefixIcon="e-icons e-line",TooltipText="Add Line",Align=ItemAlign.Center,Click="addLine"},
                new ToolbarItem{Type=ItemType.Button,PrefixIcon="e-icons e-arrow-right-up",TooltipText="Add Arrow",Align=ItemAlign.Center,Click="addArrow"},
                new ToolbarItem{Type=ItemType.Button,PrefixIcon="e-icons e-rectangle",TooltipText="Add Rectangle",Align=ItemAlign.Center,Click="addRectangle"},
                new ToolbarItem{Type=ItemType.Button,PrefixIcon="e-icons e-circle",TooltipText="Add Circle",Align=ItemAlign.Center,Click="addCircle"},
                new ToolbarItem{Type=ItemType.Button,PrefixIcon="e-icons e-pentagon",TooltipText="Add Polygon",Align=ItemAlign.Center,Click="addPolygon"},
                new ToolbarItem {Type = ItemType.Separator , TooltipText="separator" ,Align=ItemAlign.Center},
                new ToolbarItem{Type=ItemType.Button,PrefixIcon="e-icons e-length",TooltipText="Calibrate Distance",Align=ItemAlign.Center,Click="distance"},
                new ToolbarItem{Type=ItemType.Button,PrefixIcon="e-icons e-perimeter",TooltipText="Calibrate Permiter ",Align=ItemAlign.Center,Click="perimeter"},
                new ToolbarItem{Type=ItemType.Button,PrefixIcon="e-icons e-area",TooltipText="Calibrate Area",Align=ItemAlign.Center,Click="area"},
                new ToolbarItem{Type=ItemType.Button,PrefixIcon="e-icons e-radius",TooltipText="Calibrate Radius",Align=ItemAlign.Center,Click="radius"},
                new ToolbarItem{Type=ItemType.Button,PrefixIcon="e-icons e-volume",TooltipText="Calibrate Volume",Align=ItemAlign.Center,Click="volume"},
                new ToolbarItem {Type = ItemType.Separator , TooltipText="separator" ,Align=ItemAlign.Center},
                new ToolbarItem{Type=ItemType.Button,PrefixIcon="e-icons e-text-annotation",TooltipText="Free Text",Align=ItemAlign.Center,Click="freeText"},
                new ToolbarItem {Type = ItemType.Separator , TooltipText="separator" ,Align=ItemAlign.Center},
                new ToolbarItem { Type = ItemType.Input, Template=@stampMenu, TooltipText = "Add Stamp",Align=ItemAlign.Center},
                new ToolbarItem {Type = ItemType.Separator , TooltipText="separator" ,Align=ItemAlign.Center},
                new ToolbarItem { Type = ItemType.Input, Template=@SignatureToolbar, TooltipText = "Add Signature",Align=ItemAlign.Center},
                new ToolbarItem {Type = ItemType.Separator , TooltipText="separator" ,Align=ItemAlign.Center},
                new ToolbarItem{Type=ItemType.Button,PrefixIcon="e-icons e-style", TooltipText="Ink",Align=ItemAlign.Center,Click="ink"},


            }).Render()
        </div>

        <div>
            @Html.EJS().Toolbar("formFieldToolbar").Height("50px").Items(new List<ToolbarItem>  {
               new ToolbarItem {Type=ItemType.Button,PrefixIcon="e-icons e-text-form",TooltipText="TextBox",Align=ItemAlign.Center,Click="textBox"},
               new ToolbarItem {Type=ItemType.Button,PrefixIcon="e-icons e-password",TooltipText="Password",Align=ItemAlign.Center,Click="passWord"},
               new ToolbarItem {Type=ItemType.Button,PrefixIcon="e-icons e-check-box",TooltipText="CheckBox",Align=ItemAlign.Center,Click="checkBox"},
               new ToolbarItem {Type=ItemType.Button,PrefixIcon="e-icons e-radio-button",TooltipText="RadioButton",Align=ItemAlign.Center,Click="radioButton"},
               new ToolbarItem {Type=ItemType.Button,PrefixIcon="e-icons e-drop-down",TooltipText="Dropdown",Align=ItemAlign.Center,Click="dropDown"},
               new ToolbarItem {Type=ItemType.Button,PrefixIcon="e-icons e-list-unordered",TooltipText="ListBox",Align=ItemAlign.Center,Click="listBox"},
               new ToolbarItem { Type = ItemType.Input, Template=formFieldSignatureMenu, TooltipText = "Add Signature",Align=ItemAlign.Center},

            }).Render()
        </div>
        <div id="textSearchToolbar" style="display:none">
            <div class="e-pv-search-bar" id="container_search_box" style="top:113px;right:0px;z-index:1111">
                <div class="e-pv-search-bar-elements" id="container_search_box_elements" style="width:330px">
                    <div class="e-input-group e-pv-search-input" id="container_search_input_container">
                        <input class="e-input" id="container_search_input" type="text" placeholder="Find in document" onkeypress="searchInputKeypressed(event)" oninput="inputChange()" />
                        <span class="e-input-group-icon e-input-search-group-icon e-icons e-search" id="container_search_box-icon" onclick="searchClickHandler()"></span>
                    </div>
                    <button class="e-btn e-icon-btn e-pv-search-btn e-icons e-chevron-left" id="container_prev_occurrence" type="button" aria-label="Previous Search text">
                        <span class="e-pv-icon-search e-pv-prev-search-icon" id="container_prev_occurrenceIcon" onclick="previousTextSearch()"></span>
                    </button>
                    <button class="e-btn e-icon-btn e-pv-search-btn e-icons e-chevron-right" id="container_next_occurrence" type="button" aria-label="Next Search text">
                        <span class="e-pv-icon-search e-pv-next-search-icon" id="container_next_occurrenceIcon" onclick="nextTextSearch()"></span>
                    </button>
                </div>
                <div class="e-pv-match-case-container" id="container_match_case_container">
                    <div class="e-checkbox-wrapper e-wrapper e-pv-match-case">
                        <label for="container_match_case">
                            <input id="container_match_case" type="checkbox" class="e-control e-checkbox e-lib" onclick="checkBoxChanged(event)" />
                            <span class="e-ripple-container" data-ripple="true"></span>
                            <span id="checkboxSpan" class="e-icons e-frame"></span>
                            <span class="e-label">Match case</span>
                        </label>
                    </div>
                </div>
            </div>
        </div>

        @Html.EJS().PdfViewer("pdfviewer").EnableToolbar(false).EnableNavigationToolbar(false).EnableThumbnail(false).DocumentLoad("documentLoaded").PageChange("pageChanged").DocumentPath("https://cdn.syncfusion.com/content/pdf/hive-succinctly.pdf").EnableAnnotationToolbar(false).EnableCommentPanel(false).ResourceUrl("https://cdn.syncfusion.com/ej2/23.2.6/dist/ej2-pdfviewer-lib").Render()
        <input type="file" id="fileUpload" accept=".pdf" style="display:block;visibility:hidden;width:0;height:0;">
        <div id="magnificationToolbarItems">
            @Html.EJS().Toolbar("magnificationToolbar").Items(new List<ToolbarItem> {
new ToolbarItem { Type = ItemType.Button, PrefixIcon = "e-pv-fit-page-icon", TooltipText = "Fit to page",Click="pageFitClicked"},
new ToolbarItem { Type = ItemType.Button, PrefixIcon = "e-icons e-circle-add",TooltipText = "Zoom in",Click="zoomInClicked" },
new ToolbarItem { Type = ItemType.Button, PrefixIcon = "e-icons e-circle-remove", TooltipText = "Zoom out",Click="zoomOutClicked"},
}).Render()
            @Html.EJS().Menu("stampMenu").Items(ViewData["menuItem"]).Select("onItemSelect").ShowItemOnClick(true).Render()
            @Html.EJS().Menu("SignatureToolbar").Items(ViewData["signItem"]).Select("onSignatureClick").ShowItemOnClick(true).Render()
            @Html.EJS().Menu("formFieldSignatureMenu").Items(ViewData["signItem"]).Select("onSignatureClick").ShowItemOnClick(true).Render()

        </div>
    </div>
}

@section Meta{
    <meta name="description" content="This example demonstrates the Custom Toolbar in ASP.NET MVC PDF Viewer control. Explore here for more details." />
}

@section ActionDescription{
    <div id="action-description">
        <p>This example illustrates the process of crafting a customized toolbar within the PDF Viewer, allowing you to incorporate specific tools tailored to your needs.</p>
    </div>
}

@section Description{
    <div id="description">
        <p>

            This sample demonstrate how to perform the PDF Viewer core functionalities using a custom toolbar.In this example, you can see PDF Viewer control API in action to perform the functionalities.
        <p>
            <ul>
                <li>Load document - <code>viewer.load(fileName, password)</code></li>
                <li>Save - <code>viewer.download()</code></li>
                <li>Go to Previous Page - <code>viewer.navigation.goToPreviousPage()</code></li>
                <li>Go to Next Page - <code>viewer.navigation.goToNextPage()</code></li>
                <li>Go to Page - <code>viewer.navigation.goToPage(pageindex)</code></li>
                <li>TextSelection  - <code>textSelection()</code></li>
                <li>Pan  - <code>panMode()</code></li>
                <li>Annotation Edit - <code>openEditAnnotation()</code></li>
                <li>FormFields Edit - <code>addEditFormFields()</code></li>
                <li>Search Text - <code>viewer.textSearch.searchText(searchText,isMatchCase)</code></li>
                <li>Search Next - <code>viewer.textSearch.searchNext()</code></li>
                <li>Search Previous - <code>viewer.textSearch.searchPrevious()</code></li>
                <li>Cancel Search Text - <code>viewer.textSearch.cancelTextSearch()</code></li>
                <li>Print - <code>viewer.print.print()</code></li>
                <li>Fit To Page - <code>viewer.magnification.fitToPage()</code></li>
                <li>Zoom In - <code>viewer.magnification.zoomIn()</code></li>
                <li>Zoom Out - <code>viewer.magnification.zoomOut()</code></li>
            </ul>
            More information on the PDF Viewer instantiation can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/pdfviewer/getting-started/" aria-label="documentation section">
                documentation section
            <span class="sr-only">opens in a new tab</span></a>.
        </p>
    </div>
}
@*custom code start*@
<style>
    /* custom code start*/
    @@font-face {
        font-family: "pV-icons";
        font-style: normal;
        font-weight: normal;
        src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj8wS0QAAAEoAAAAVmNtYXDSeNLMAAABuAAAAFZnbHlmok0NtwAAAjAAAAPkaGVhZBN3pEcAAADQAAAANmhoZWEHrwNhAAAArAAAACRobXR4NsgAAAAAAYAAAAA4bG9jYQdkBmQAAAIQAAAAHm1heHABHAAwAAABCAAAACBuYW1lD0oZXgAABhQAAALBcG9zdFG4mE4AAAjYAAAAyAABAAADUv9qAFoEAAAA/+gEAAABAAAAAAAAAAAAAAAAAAAADgABAAAAAQAAxsly1F8PPPUACwPoAAAAANgsr7EAAAAA2CyvsQAAAAAEAAQAAAAACAACAAAAAAAAAAEAAAAOACQABAAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQPqAZAABQAAAnoCvAAAAIwCegK8AAAB4AAxAQIAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA6RDpHQNS/2oAWgQAAJYAAAABAAAAAAAABAAAAAPoAAAD6AAAA+gAAAPoAAAD6AAAA+gAAAPoAAAD6AAAA+gAAAPoAAAD6AAAA+gAAAPoAAAAAAACAAAAAwAAABQAAwABAAAAFAAEAEIAAAAGAAQAAQAC6RLpHf//AADpEOkU//8AAAAAAAEABgAKAAAAAQACAAMABQAGAAcACAAJAAoACwAMAA0ABAAAAAAAAAAUACoAZACkAL4A7gEuAVwBcAGEAZ4ByAHyAAAAAQAAAAAD6gMuAAUAAAkBBwkBJwIAAet0/on+iXQDL/4VcwF3/olzAAEAAAAAA+oDLgAFAAATCQEXCQGJAXcBd3T+Ff4VAy/+iQF3c/4VAesAAAAAAwAAAAAEAAQAAAMADwAbAAABITUhBQ4BBy4BJz4BNx4BBRYAFzYANyYAJwYAAQACAP4AAoAE2aOj2QQE2aOj2fyEBgEh2dkBIQYG/t/Z2f7fAcCAQKPZBATZo6PZBATZo9n+3wYGASHZ2QEhBgb+3wAAAAADAAAAAAQABAAACwAXACMAAAEjFTMVMzUzNSM1IwEOAQcuASc+ATceAQUWABc2ADcmACcGAAHAwMCAwMCAAcAE2aOj2QQE2aOj2fyEBgEh2dkBIQYG/t/Z2f7fAkCAwMCAwP8Ao9kEBNmjo9kEBNmj2f7fBgYBIdnZASEGBv7fAAIAAAAAAwAEAAADAAoAADEhNSEBIQkBIREhAwD9AAEA/wABgAGA/wD/AIACAP6AAYABgAACAAAAAANABAAADgAaAAABMh4CFRElBRE0Nz4BMycGFRElBRE0JiMhIgKdCwwHBf7g/uAJBAwKdC8BoAGgX0T+BkQDgAYGCwr9YHZ2AqAOCQQGUS9D/KGrqwNfRlsAAAACAAAAAAP/BAAACwAjAAABDgEHLgEnPgE3HgEFHgEXMjY/ARcVATcBIyc3PgE1LgEnDgECgAOQbW2QAwOQbW2Q/YME2aNGfDIDJAEEYf78MyMCKi4E2aOj2QKAbZADA5BtbZADA5Bto9kELioDJDP+/GEBBCQDMnxGo9kEBNkAAAQAAAAABAAEAAADAAcAFQAZAAABFSE1JRUjNSERMxUhNTMRLgEnIQ4BNyE1IQLA/oACQID9AMACgMABSDf9ADdIvwKA/YABwMDAwICA/sDAwAFAN0gBAUmKwAAAAQAAAAACQAQAAAUAABEBNwkBJwHsU/6HAXpSAmD+YGIBPgE+YgAAAAEAAAAAAkAEAAAFAAARCQEXCQEBev6HUwHs/hMDnv7C/sJiAaABoAABAAAAAAKABAAACwAAERcHFzcXNyc3Jwcn9fVM9PVL9PRL9fQDtfX0TPX1TPT0TPT0AAAABAAAAAAD8APwAAUACwARABcAACEzNTM1IQUzFTMRISUhNSM1IwUjFSERIwJ2fvz+hv2K/H7+hgJ2AXr8fv6G/AF6fvx+fvwBevx+/Px+AXoAAAAAAgAAAAAEAAQAAAMAFgAAAREhEScGFREUFhchPgE1ETQmIyEnIQYDgP0AYh48LQMuLTw8Lf5pa/7ULQMA/gACAN8eLf1YLTwDAzwtAigvPYACAAAAAAASAN4AAQAAAAAAAAABAAAAAQAAAAAAAQAUAAEAAQAAAAAAAgAHABUAAQAAAAAAAwAUABwAAQAAAAAABAAUADAAAQAAAAAABQALAEQAAQAAAAAABgAUAE8AAQAAAAAACgAsAGMAAQAAAAAACwASAI8AAwABBAkAAAACAKEAAwABBAkAAQAoAKMAAwABBAkAAgAOAMsAAwABBAkAAwAoANkAAwABBAkABAAoAQEAAwABBAkABQAWASkAAwABBAkABgAoAT8AAwABBAkACgBYAWcAAwABBAkACwAkAb8gY3VzdG9tLXRvb2xiYXJbMTkwOF1SZWd1bGFyY3VzdG9tLXRvb2xiYXJbMTkwOF1jdXN0b20tdG9vbGJhclsxOTA4XVZlcnNpb24gMS4wY3VzdG9tLXRvb2xiYXJbMTkwOF1Gb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAGMAdQBzAHQAbwBtAC0AdABvAG8AbABiAGEAcgBbADEAOQAwADgAXQBSAGUAZwB1AGwAYQByAGMAdQBzAHQAbwBtAC0AdABvAG8AbABiAGEAcgBbADEAOQAwADgAXQBjAHUAcwB0AG8AbQAtAHQAbwBvAGwAYgBhAHIAWwAxADkAMAA4AF0AVgBlAHIAcwBpAG8AbgAgADEALgAwAGMAdQBzAHQAbwBtAC0AdABvAG8AbABiAGEAcgBbADEAOQAwADgAXQBGAG8AbgB0ACAAZwBlAG4AZQByAGEAdABlAGQAIAB1AHMAaQBuAGcAIABTAHkAbgBjAGYAdQBzAGkAbwBuACAATQBlAHQAcgBvACAAUwB0AHUAZABpAG8AdwB3AHcALgBzAHkAbgBjAGYAdQBzAGkAbwBuAC4AYwBvAG0AAAAAAgAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAQIBAwEEAQUBBgEHAQgBCQEKAQsBDAENAQ4BDwAIVG9wLWljb24LZG93bi1hcnJvdzIKUFZfWm9vbW91dAlQVl9ab29taW4LUFZfRG93bmxvYWQLUFZfQm9va21hcmsJUFZfU2VhcmNoCFBWX1ByaW50C1BWX1ByZXZpb3VzB1BWX05leHQIUFZfQ2xvc2UMUFZfRml0VG9QYWdlB1BWX09wZW4AAA==) format('truetype');
    }

    #pdfviewer {
        display: block;
        height: 640px;
    }

    #magnificationToolbar {
        background: transparent;
        height: auto;
        min-height: 56px;
        width: auto;
        border: none;
        position: absolute;
        z-index: 900;
        top: calc(100% - 140px);
        left: calc(100% - 150px);
        transform: rotate(90deg);
    }

    div#magnificationToolbar.e-toolbar .e-toolbar-items {
        background: transparent;
        padding: 2px 3px 2px 2px;
    }

    #magnificationToolbar.e-toolbar .e-tbar-btn {
        border-radius: 50%;
        min-height: 30px;
        min-width: 30px;
        border: 1px solid #c8c8c8;
        transform: rotate(90deg);
    }

    #customToolbar {
        top: 20px;
        z-index: 900;
    }

    .e-bookmark-popup {
        height: 300px;
        max-width: 300px;
    }

    .e-text-search-popup {
        height: 104px;
        max-width: 348px;
    }

    .e-custom-search-input {
        width: 234px;
    }

    .e-text-search-popup .e-footer-content,
    .e-bookmark-popup .e-footer-content {
        padding: 0;
        height: 0;
    }

    .search-button,
    .search-button:disabled,
    .search-button:focus,
    .search-button:hover {
        background: transparent;
        box-shadow: none;
    }

    #popup .e-dlg-content {
        padding-left: 0;
        padding-bottom: 0;
    }

    .e-pv-bookmarks {
        min-width: 234px;
    }

    .e-pv-current-page-number {
        width: 46px;
        height: 28px;
        text-align: center;
    }

    .material .e-pv-current-page-number {
        border-width: 1px;
    }

    .e-btn-icon.e-pv-zoom-out-icon.e-icons {
        transform: rotate(90deg);
    }

    .flex-container {
        display: flex;
        justify-content: flex-end;
        align-items: center;
    }

    .render-mode-info {
        background: none;
        border: none;
        padding-left: 0px;
    }

        .render-mode-info .render-mode-info-icon {
            height: 16px;
            width: 16px;
        }

    .switchLabel {
        font-family: "Segoe UI", "GeezaPro", "DejaVu Serif", sans-serif;
        font-weight: 400;
        line-height: 20px;
        letter-spacing: 0.24px;
        text-align: right;
        font-size: 14px;
        margin-bottom: 3px;
    }

    .render-mode-info .render-mode-info-icon::before {
        line-height: normal;
    }

    .buttonSwitch {
        Width: 40px;
        Height: 24px;
    }
    .e-pv-fit-page-icon::before {
        content: '\e91b';
        font-family: "pV-icons";
    }

    #editAnnotationToolbar {
        display: none;
    }

    #formFieldToolbar {
        display: none;
    }
</style>
@*custom code end*@
<script>
    var currentPageBox
    var matchCase = false;
    var filename;
    var isInkEnabled = false;
    var searchActive = false;

    window.onload = function () {
        currentPageBox = document.getElementById('currentPage');
        currentPageBox.value = '1';
        document.getElementById('fileUpload').addEventListener('change', readFile, false);
        document.addEventListener('click', checkSearchActive);
        currentPageBox.addEventListener('keypress', () => {
            var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
            var currentPage = document.getElementById('currentPage');
            if ((event.which < 48 || event.which > 57) && event.which !== 8 && event.which !== 13) {
                event.preventDefault();
                return false;
            } else {
                var currentPageNumber = parseInt((currentPage).value);
                if (event.which === 13) {
                    if (currentPageNumber > 0 && currentPageNumber <= pdfViewer.pageCount) {
                        pdfViewer.navigation.goToPage(currentPageNumber);
                    } else {
                        (currentPage).value = pdfViewer.currentPageNumber.toString();
                    }
                }
                return true;
            }
        });
    }
    function openFile() {
        disableInkAnnotation();
        document.getElementById('fileUpload').click();
    }
    function change(args) {
        var viewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (args.checked) {
            viewer.serviceUrl = '';
        } else {
            viewer.serviceUrl = '@serviceUrl';
        }
        viewer.dataBind();
        viewer.load(viewer.documentPath, null);
    }

    function textSelection() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.interactionMode = 'TextSelection';
        pdfViewer.enableTextSelection = true;

        const editAnnotationToolbarElement = document.getElementById('editAnnotationToolbar');
        if (editAnnotationToolbarElement?.style.display === 'block') {
            editAnnotationToolbarElement.style.display = 'none';
        }

        const textSearchToolbarElement = document.getElementById('textSearchToolbar');
        if (textSearchToolbarElement?.style.display === 'block') {
            textSearchToolbarElement.style.display = 'none';
        }

        const formFieldToolbarElement = document.getElementById('formFieldToolbar');
        if (formFieldToolbarElement?.style.display === 'block') {
            formFieldToolbarElement.style.display = 'none';
            pdfViewer.designerMode = false;
        }
    }

    function panMode() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.interactionMode = 'Pan';
        pdfViewer.enablePanMode = true;

        const editAnnotationToolbarElement = document.getElementById('editAnnotationToolbar');
        if (editAnnotationToolbarElement?.style.display === 'block') {
            editAnnotationToolbarElement.style.display = 'none';
        }

        const textSearchToolbarElement = document.getElementById('textSearchToolbar');
        if (textSearchToolbarElement?.style.display === 'block') {
            textSearchToolbarElement.style.display = 'none';
        }

        const formFieldToolbarElement = document.getElementById('formFieldToolbar');
        if (formFieldToolbarElement?.style.display === 'block') {
            formFieldToolbarElement.style.display = 'none';
            pdfViewer.designerMode = false;
        }
    }
    function openEditAnnotation() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        const textSearchToolbarElement = document.getElementById('textSearchToolbar');
        if (textSearchToolbarElement !== null && textSearchToolbarElement.style.display === 'block') {
            textSearchToolbarElement.style.display = 'none';
        }

        const formFieldToolbarElement = document.getElementById('formFieldToolbar');
        if (formFieldToolbarElement !== null && formFieldToolbarElement.style.display === 'block') {
            formFieldToolbarElement.style.display = 'none';
            pdfViewer.designerMode = false;
        }
        const editAnnotationToolbarElement = document.getElementById('editAnnotationToolbar');
        if (editAnnotationToolbarElement !== null) {
            if (editAnnotationToolbarElement.style.display === 'block') {
                editAnnotationToolbarElement.style.display = 'none';
            } else {
                editAnnotationToolbarElement.style.display = 'block';
            }
        }

    }
    function highlight() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Highlight');
    }

    function underLine() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Underline');
    }

    function strikeThrough() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Strikethrough');
    }

    function squiggly() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Squiggly');
    }

    function addLine() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Line');
    }

    function addArrow() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Arrow')
    }

    function addRectangle() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Rectangle');
    }

    function addCircle() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Circle');
    }

    function addPolygon() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Polygon');
    }

    function distance() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Distance');
    }

    function perimeter() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Perimeter');
    }

    function area() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Area');
    }

    function radius() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Radius');
    }

    function volume() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Volume');
    }

    function freeText() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('FreeText');
    }
    
    
    function onItemSelect(args) {
        disableInkAnnotation();
        const textSearchToolbarElement = document.getElementById('textSearchToolbar');
        if (textSearchToolbarElement !== null && textSearchToolbarElement.style.display === 'block') {
            textSearchToolbarElement.style.display = 'none';
        }

        const formFieldToolbarElement = document.getElementById('formFieldToolbar');
        if (formFieldToolbarElement !== null && formFieldToolbarElement.style.display === 'block') {
            formFieldToolbarElement.style.display = 'none';
            pdfViewer.designerMode = false;
        }
        var viewer = document.getElementById('pdfviewer').ej2_instances[0];
        var stampId = args.element.id;
        var stampText = args.element.innerText;
        if (stampId === 'Dynamic' && stampText != null) {
            if (stampText === 'Revised') {
                viewer.annotation.setAnnotationMode("Stamp", "Revised");
            }
            else if (stampText == "Reviewed") {
                viewer.annotation.setAnnotationMode("Stamp", "Reviewed");
            }
            else if (stampText == "Received") {
                viewer.annotation.setAnnotationMode("Stamp", "Received");
            }
            else if (stampText == "Confidential") {
                viewer.annotation.setAnnotationMode("Stamp", "Confidential");
            }
            else if (stampText == "Approved") {
                viewer.annotation.setAnnotationMode("Stamp", "Approved");
            }
            else if (stampText == "Not Approved") {
                viewer.annotation.setAnnotationMode("Stamp", "NotApproved");
            }
        }
        if (stampId === 'Sign Here' && stampText != null) {
            if (stampText === 'Witness') {
                viewer.annotation.setAnnotationMode("Stamp", undefined, "Witness");
            }
            else if (stampText == "Initial Here") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, "InitialHere");
            }
            else if (stampText == "Sign Here") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, "SignHere");
            }
            else if (stampText == "Accepted") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, "Accepted");
            }
            else if (stampText == "Rejected") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, "Rejected");
            }
        }
        if (stampId === 'Standard Business' && stampText != null) {
            if (stampText === 'Approved') {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "Approved");
            }
            else if (stampText == "Not Approved") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "NotApproved");
            }
            else if (stampText == "Draft") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "Draft");
            }
            else if (stampText == "Final") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "Final");
            }
            else if (stampText == "Completed") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "Completed");
            }
            else if (stampText == "Confidential") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "Confidential");
            }
            else if (stampText == "For Public Release") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "ForPublicRelease");
            }
            else if (stampText == "Not For Public Release") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "NotForPublicRelease");
            }
            else if (stampText == "For Comment") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "ForComment");
            }
            else if (stampText == "Void") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "Void");
            }
            else if (stampText == "Preliminary Results") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "PreliminaryResults");
            }
            else if (stampText == "Information Only") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "InformationOnly");
            }
        }
    }

    function ink() {

        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (!isInkEnabled) {
            pdfViewer.annotation.setAnnotationMode("Ink");
            isInkEnabled = true;
        }
        else {
            pdfViewer.annotation.setAnnotationMode("none");
            isInkEnabled = false;
        }

    }

    function disableInkAnnotation() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (isInkEnabled) {
            pdfViewer.annotation.setAnnotationMode("none");
            isInkEnabled = false;
        }

    }

    function addEditFormFields() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        const formFieldToolbarElement = document.getElementById('formFieldToolbar');
        if (formFieldToolbarElement !== null) {
            if (formFieldToolbarElement.style.display === 'block') {
                formFieldToolbarElement.style.display = 'none';
                pdfViewer.designerMode = false;
            } else {
                formFieldToolbarElement.style.display = 'block';
                pdfViewer.designerMode = true;
            }
        }

        const editAnnotationToolbarElement = document.getElementById('editAnnotationToolbar');
        if (editAnnotationToolbarElement !== null && editAnnotationToolbarElement.style.display === 'block') {
            editAnnotationToolbarElement.style.display = 'none';
        }

        const textSearchToolbarElement = document.getElementById('textSearchToolbar');
        if (textSearchToolbarElement !== null && textSearchToolbarElement.style.display === 'block') {
            textSearchToolbarElement.style.display = 'none';
        }
    }
    function textBox() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.formDesignerModule.setFormFieldMode('Textbox');
    }

    function passWord() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.formDesignerModule.setFormFieldMode('Password');
    }

    function checkBox() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.formDesignerModule.setFormFieldMode('CheckBox');
    }

    function radioButton() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.formDesignerModule.setFormFieldMode('RadioButton');
    }

    function dropDown() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.formDesignerModule.setFormFieldMode('DropDown');
    }

    function listBox() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.formDesignerModule.setFormFieldMode('ListBox');
    }

    function onSignatureClick(event) {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        const editAnnotationToolbarElement = document.getElementById('editAnnotationToolbar');
        if (editAnnotationToolbarElement?.style.display === 'block') {
            if (event) {
                if (event.element.innerText === 'Add Signature') {
                    pdfViewer.annotationModule.setAnnotationMode('HandWrittenSignature');
                } else if (event.element.innerText === 'Add Initial') {
                    pdfViewer.annotationModule.setAnnotationMode('Initial');
                }
            }
        }

        const formFieldToolbarElement = document.getElementById('formFieldToolbar');
        if (formFieldToolbarElement?.style.display === 'block') {
            if (event) {
                if (event.element.innerText === 'Add Signature') {
                    pdfViewer.formDesignerModule.setFormFieldMode('SignatureField');
                } else if (event.element.innerText === 'Add Initial') {
                    pdfViewer.formDesignerModule.setFormFieldMode('InitialField');
                }
            }
        }
    }

    function findText() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        const editAnnotationToolbarElement = document.getElementById('editAnnotationToolbar');
        if (editAnnotationToolbarElement !== null && editAnnotationToolbarElement.style.display === 'block') {
            editAnnotationToolbarElement.style.display = 'none';
        }

        const textSearchToolbarElement = document.getElementById('textSearchToolbar');
        if (textSearchToolbarElement !== null) {
            if (textSearchToolbarElement.style.display === 'block') {
                textSearchToolbarElement.style.display = 'none';
            } else {
                textSearchToolbarElement.style.display = 'block';
            }
        }

        const formFieldToolbarElement = document.getElementById('formFieldToolbar');
        if (formFieldToolbarElement !== null && formFieldToolbarElement.style.display === 'block') {
            formFieldToolbarElement.style.display = 'none';
            pdfViewer.designerMode = false;
        }

    }
    function checkSearchActive() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (!searchActive) {
            pdfViewer.textSearchModule.clearAllOccurrences();
        }
    }
     function searchClickHandler() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        var searchBtn = document.getElementById('container_search_box-icon');
        if (searchBtn.classList.contains('e-search')) {
            pdfViewer.textSearch.cancelTextSearch();
            initiateTextSearch();
            updateSearchInputIcon(false);
            searchText = '';
        }
        else if (searchBtn.classList.contains('e-close')) {
            var searchInput = document.getElementById('container_search_input');
            updateSearchInputIcon(true);
            searchInput.value = '';
            searchInput.focus();
            pdfViewer.textSearch.cancelTextSearch();
            searchText = '';
        }
    }
     function updateSearchInputIcon(isEnable) {
     var searchButton = document.getElementById('container_search_box-icon');
     if (isEnable) {
         searchButton.classList.remove('e-close');
         searchButton.classList.add('e-search');
        }
     else {
         searchButton.classList.add('e-close');
         searchButton.classList.remove('e-search');
        }
    }
    function inputChange() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.textSearchModule.clearAllOccurrences();
        searchActive = false;
        if (document.getElementById('container_search_input').value === '') {
            updateSearchInputIcon(true);
            pdfViewer.textSearch.cancelTextSearch();
            searchText = '';
        }
    }
    function searchInputKeypressed(event) {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (event.key === 'Enter') {
            initiateTextSearch();
        }
    }

    var searchText = '';
    var prevMatchCase = false;
    var matchCase = false;

    function initiateTextSearch() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        var textsearchPrevElement = document.getElementById('container_prev_occurrence');
        var textsearchNextElement = document.getElementById('container_next_occurrence');
        var textsearchElement = document.getElementById('container_search_box-icon');
        if (textsearchPrevElement && textsearchNextElement && textsearchElement) {
            textsearchPrevElement.disabled = false;
            textsearchNextElement.disabled = false;
            textsearchElement.classList.add('e-close');
      	    textsearchElement.classList.remove('e-search');
	    textsearchPrevElement.addEventListener("click", previousTextSearch);
            textsearchNextElement.addEventListener("click", nextTextSearch);
            if (searchText !== (document.getElementById('container_search_input').value) || prevMatchCase !== matchCase) {
                pdfViewer.textSearch.cancelTextSearch();
                searchText = (document.getElementById('container_search_input').value);
                searchActive = true;
                pdfViewer.textSearch.searchText(searchText, matchCase);
                prevMatchCase = matchCase;
            }
            else {
                nextTextSearch();
            }
        }
    }
    function previousTextSearch() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.textSearchModule.searchPrevious();
        searchActive = true;
    }

    function nextTextSearch() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.textSearchModule.searchNext();
        searchActive = true;
    }
    function checkBoxChanged(event) {
        const target = event.target;
        if (target.checked) {
            const matchcaseElement = document.getElementById('container_match_case');
            if (matchcaseElement) {
                matchcaseElement.checked = true;
            }
            matchCase = true;
            const checkboxSpanElement = document.getElementById('checkboxSpan');
            if (checkboxSpanElement) {
                checkboxSpanElement.classList.add('e-check');
            }
        } else {
            matchCase = false;
            const checkboxSpanElement = document.getElementById('checkboxSpan');
            if (checkboxSpanElement) {
                checkboxSpanElement.classList.remove('e-check');
            }
        }
    }


    function readFile(evt) {
        var upoadedFiles = evt.target.files;
        var uploadedFile = upoadedFiles[0];
		filename = upoadedFiles[0].name;
        var reader = new FileReader();
        reader.readAsDataURL(uploadedFile);
        reader.onload = function () {
            var obj = document.getElementById('pdfviewer').ej2_instances[0];
            var uploadedFileUrl = this.result;
            obj.documentPath = uploadedFileUrl;
            obj.fileName = filename;
            obj.downloadFileName = filename;
            var currentPageBox = document.getElementById('currentPage');
            currentPageBox.value = '1';
            var pageCount = document.getElementById('totalPage');
            pageCount.textContent = 'of ' + obj.pageCount;
        }
    }
    function previousClicked() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.navigation.goToPreviousPage();
    }
    function nextClicked() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.navigation.goToNextPage();
    }
    function printClicked() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.print.print();
    }
    function saveClicked() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.download();
    }
    function pageFitClicked() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.magnification.fitToPage();
    }
    function zoomInClicked() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.magnification.zoomIn();
    }
    function zoomOutClicked() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.magnification.zoomOut();
    }
    function pageChanged() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        var currentPage = document.getElementById('currentPage');
        (currentPage).value = pdfViewer.currentPageNumber;
        updatePageNavigation();
    }
    function onCurrentPageBoxKeypress(event) {
        var viewer = document.getElementById('pdfviewer').ej2_instances[0];
        var currentPageBox = document.getElementById('currentPage');
        if ((event.which < 48 || event.which > 57) && event.which !== 8 && event.which !== 13) {
            event.preventDefault();
            return false;
        }
        else {
            var currentPageNumber = parseInt(currentPageBox.value);
            if (event.which === 13) {
                if (currentPageNumber > 0 && currentPageNumber <= viewer.pageCount) {
                    viewer.navigation.goToPage(currentPageNumber);
                }
                else {
                    currentPageBox.value = viewer.currentPageNumber.toString();
                }
            }
            return true;
        }
    }

    function currentPageClicked() {
        var currentPage = document.getElementById('currentPage');
        (currentPage).select();
    }
    function documentLoaded() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        var pageCount = document.getElementById('totalPage');
        pageCount.textContent = 'of ' + pdfViewer.pageCount;
        updatePageNavigation();
    }
    function updatePageNavigation() {
        var toolbarObj = document.getElementById('topToolbar').ej2_instances[0];
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.currentPageNumber === 1) {
            toolbarObj.enableItems(document.getElementById('previousPage'), false);
            toolbarObj.enableItems(document.getElementById('nextPage'), true);
        } else if (pdfViewer.currentPageNumber === pdfViewer.pageCount) {
            toolbarObj.enableItems(document.getElementById('previousPage'), true);
            toolbarObj.enableItems(document.getElementById('nextPage'), false);
        } else {
            toolbarObj.enableItems(document.getElementById('previousPage'), true);
            toolbarObj.enableItems(document.getElementById('nextPage'), true);
        }
    }
    function updateZoomButtons() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        var toolbarObj = document.getElementById('topToolbar').ej2_instances[0];
        if (pdfViewer.zoomPercentage <= 50) {
            toolbarObj.enableItems(document.getElementById('zoomIn'), true);
            toolbarObj.enableItems(document.getElementById('zoomOut'), false);
            toolbarObj.enableItems(document.getElementById('fitPage'), true);
        } else if (viewer.zoomPercentage >= 400) {
            toolbarObj.enableItems(document.getElementById('zoomIn'), false);
            toolbarObj.enableItems(document.getElementById('zoomOut'), true);
            toolbarObj.enableItems(document.getElementById('fitPage'), true);
        } else {
            toolbarObj.enableItems(document.getElementById('zoomIn'), true);
            toolbarObj.enableItems(document.getElementById('zoomOut'), true);
            toolbarObj.enableItems(document.getElementById('fitPage'), true);
        }
    }
</script>
@section Title{
    <title>ASP.NET MVC PDF Viewer Custom Toolbar Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Custom Toolbar in ASP.NET MVC PDF Viewer Control</h1>
}
