@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="control-section" align="center">
       
            @Html.EJS().Chart("container").Series(
           series =>
           {
               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).
                   XName("Period").
               YName("Banana_ProductionRate").
               Width(2).Opacity(1).
               Marker(mr => mr.Visible(false).Width(7).Height(7)).
               DataSource(ViewBag.ChartData).Add();

               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).
                   XName("Period").
               YName("Banana_ProductionRate").
               Width(2).Opacity(1).
               Marker(mr => mr.Visible(false).Width(7).Height(7).Shape(Syncfusion.EJ2.Charts.ChartShape.Diamond)).
               DashArray("10").
               DataSource(ViewBag.ChartDataValues).Add();

           }).PrimaryXAxis(
           xAxis =>
           {
               xAxis.ValueType(Syncfusion.EJ2.Charts.ValueType.Category).Interval(1).
                   MajorGridLines(mg=>mg.Width(0)).
                   MajorTickLines(mt => mt.Width(0));
           }).PrimaryYAxis(
           yAxis =>
           {
               yAxis.LabelFormat("{value}K").
               RangePadding(Syncfusion.EJ2.Charts.ChartRangePadding.None).
               LineStyle(ls => ls.Width(0)).
               Interval(50).
               Minimum(0).
               Maximum(300).
               MajorTickLines(mt => mt.Width(0));
           }).Title("Fruits Production Statistics").Tooltip(
           tooltip =>
           {
               tooltip.Enable(true).
               Shared(true).
               Format("${point.x} : <b>${point.y}</b>").Header("<b>Fruits Production</b>");
           }).Crosshair(
           crosshair =>
           {
               crosshair.Enable(false).
               LineType(Syncfusion.EJ2.Charts.LineType.Vertical);
           }).ChartArea(area => area.Border(br => br.Width(0))).Load("load").Annotations(an => {an.X("Feb").Y("125").Content("<div>Actual</div>").CoordinateUnits(Syncfusion.EJ2.Charts.Units.Point).Add();
               an.X("Aug").Y("210").Content("<div>Forecast</div>").CoordinateUnits(Syncfusion.EJ2.Charts.Units.Point).Add();
           }).Render()
        </div>
    
 @*custom code start*@
    <style>
        #control-container {
        padding: 0px !important;
    }

    #container_Series_1,
    #container_Series_0 {
        stroke-linejoin: round; stroke-linecap: round;
        -webkit-animation: dash 1s linear infinite;
        animation: dash 1s linear infinite;
    }

    #container_Series_0_Point_3_Symbol {
        -webkit-animation: opac 1s ease-out infinite;
        animation: opac 1s ease-out infinite;
    }

    @@-webkit-keyframes dash {
        100% {
            stroke-dashoffset: -20px;
        }
    }

    @@keyframes dash {
        100% {
            stroke-dashoffset: -20px;
        }
    }

    @@keyframes opac {
        0% {
            stroke-opacity: 1;
            stroke-width: 0px;
        }
        100% {
            stroke-opacity: 0;
            stroke-width: 10px;
        }
    }
    </style>
@*custom code end*@
    <script>
        var load = function (args) {
            let annotationColor = 'light';
            args.chart.annotations[0].content = '<div style="color:black; font-weight:bold;">Actual</div>';
            args.chart.annotations[1].content = '<div style="color:black; font-weight:bold;">Forecast</div>';
            let selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).
                 replace(/-dark/i, "Dark").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast').replace(/5.3/i, '5');
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "75%";
            args.chart.primaryXAxis.labelIntersectAction = ej.base.Browser.isDevice?'None':'Trim';
            args.chart.primaryXAxis.labelRotation = ej.base.Browser.isDevice?-45:0;
            if (selectedTheme && selectedTheme.indexOf('fabric-dark') > -1) {
                annotationColor = 'dark'
            } else if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {
                annotationColor = 'light'
            } else if (selectedTheme === 'material-dark') {
                annotationColor = 'dark'
            } else if (selectedTheme === 'material') {
                annotationColor = 'light'
            } else if (selectedTheme === 'bootstrap5-dark') {
                annotationColor = 'dark'
            } else if (selectedTheme === 'bootstrap5') {
                annotationColor = 'light'
            } else if (selectedTheme === 'bootstrap-dark') {
                annotationColor = 'dark'
            } else if (selectedTheme === 'bootstrap') {
                annotationColor = 'light'
            } else if (selectedTheme === 'highcontrast') {
                annotationColor = 'dark'
            } else if (selectedTheme === 'fluent-dark') {
                annotationColor = 'dark'
            } else if (selectedTheme === 'fluent') {
                annotationColor = 'light'
            } else if (selectedTheme === 'tailwind-dark') {
                annotationColor = 'dark'
            } else if (selectedTheme === 'tailwind') {
                annotationColor = 'light'
            } else if (selectedTheme === 'material3-dark') {
                annotationColor = 'dark';
            } else if (selectedTheme === 'material3') {
                annotationColor = 'light';
            } else if (selectedTheme === 'fluent2') {
                annotationColor = 'light';
            } else if (selectedTheme === 'fluent2-highcontrast' || selectedTheme === 'fluent2-dark') {
                annotationColor = 'dark';
            } else {
                annotationColor = 'light'
            }
                    
            if (annotationColor === 'light') {
                args.chart.annotations[0].content = '<div style="color:black; font-weight:bold;">Actual</div>';
                args.chart.annotations[1].content = '<div style="color:black; font-weight:bold;">Forecast</div>';
            }
            else {
                args.chart.annotations[0].content = '<div style="color:whitesmoke; font-weight:bold;">Actual</div>';
                args.chart.annotations[1].content = '<div style="color:whitesmoke; font-weight:bold;">Forecast</div>';
            }                           
        }
    </script>
}
@section ActionDescription{
    <p>
        This sample shows the rate of fruit production with default line series and dash array in the chart. Dashed lines are animated using CSS animation.
    </p>
}
 @*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Dashed Line in ASP.NET MVC Chart control. Explore here for more details."/>
                }
 @*custom code end*@
@section Description{
    <p>
        In this example, you will see how to render and configure a line chart. Line charts are used to represent time-dependent data, showing trends in data at equal intervals. You can use <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.Charts.ChartSeries.html#Syncfusion_EJ2_Charts_ChartSeries_DashArray" aria-label="DashArray">DashArray<span class="sr-only">opens in a new tab</span></a>, 
        <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.Charts.ChartSeries.html#Syncfusion_EJ2_Charts_ChartSeries_Width" aria-label="">Width<span class="sr-only">opens in a new tab</span></a> and <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.Charts.ChartSeries.html#Syncfusion_EJ2_Charts_ChartSeries_Fill" aria-label="Fill">Fill<span class="sr-only">opens in a new tab</span></a> properties to customize the line.
    </p>
    <p>
        <code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover a point or tap on a point in touch enabled devices.
    </p>
    <p>
        More information about the dashed line can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/chart/chart-types#line-charts" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
    </p>
}
@section Title{
                    <title>ASP.NET MVC Chart Dashed Line Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Charts</h1>
                }