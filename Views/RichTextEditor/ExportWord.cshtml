@using Syncfusion.EJ2
@using EJ2MVCSampleBrowser.Models

@section ControlsSection{
    <div class="control-section">
        <div class="control-wrapper">
            @Html.EJS().RichTextEditor("default").ToolbarSettings(e =>
                     e.Items((object)ViewBag.Tools)).Created("created").Value((string)ViewBag.RTEValue).EnableXhtml(true).ActionComplete("actionCompleteHandler").BeforeQuickToolbarOpen("quickToolbarOpenHandler").QuickToolbarClose("quickToolbarClosehandler").InsertImageSettings(ViewBag.InsertImageSettings).Render()
        </div>
    </div>
    <style>

    </style>
    <script type="text/javascript">
        var rteObj;
        var hostUrl = "https://services.syncfusion.com/aspnet/production/";
        function created() {
            rteObj = this;
            var exportDoc = rteObj.element.querySelector('#custom_tbarbtn_2');
            exportDoc.onclick = function (e) {
                const rteHtmlData = rteObj.getHtml();
                const html = `<html><head></head><body>${rteHtmlData}</body></html>`;
                fetch(hostUrl + 'api/RichTextEditor/ExportToDocx', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ html: html }) // Wrap HTML in a JSON object
                }).then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    const filename = 'Result.docx';
                    // Create a Blob from the response and initiate the download
                    return response.blob().then(blob => ({ blob, filename }));
                }).then(({ blob, filename }) => {
                    const url = window.URL.createObjectURL(blob); // Create a Blob URL from the response and initiate the download
                    const a = document.createElement('a');        // Create an anchor element
                    a.href = url;
                    a.download = filename;
                    document.body.appendChild(a);                 // Append the anchor element to the document
                    a.click();                                    // Trigger a click on the anchor element to initiate the download
                    document.body.removeChild(a);                 // Remove the anchor element from the document
                    window.URL.revokeObjectURL(url);               // Revoke the object URL to free up resources
                }).catch(error => {
                    console.error('Fetch error:', error);
                });
            }
            var exportPdf = rteObj.element.querySelector('#custom_tbarbtn_3');
            exportPdf.onclick = function (e) {
                const rteHtmlData = rteObj.getHtml();
                const html = `<html><head></head><body>${rteHtmlData}</body></html>`;
                fetch(hostUrl + 'api/RichTextEditor/ExportToPdf', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ html: html }) // Wrap HTML in a JSON object
                }).then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.blob();
                }).then(blob => {
                    const url = window.URL.createObjectURL(blob);  // Create a Blob URL from the response and initiate the download
                    const a = document.createElement('a');         // Create an anchor element
                    a.href = url;
                    a.download = 'Sample.pdf';
                    document.body.appendChild(a);                  // Append the anchor element to the document
                    a.click();                                     // Trigger a click on the anchor element to initiate the download
                    document.body.removeChild(a);                  // Remove the anchor element from the document
                    window.URL.revokeObjectURL(url);               // Revoke the object URL to free up resources
                }).catch(error => {
                    console.error('Fetch error:', error);
                });
            }
        }
        function actionCompleteHandler(e) {
            if (e.requestType === 'SourceCode') {
                rteObj.getToolbar().querySelector('#custom_tbarbtn_2').parentElement.classList.add('e-overlay');
                rteObj.getToolbar().querySelector('#custom_tbarbtn_3').parentElement.classList.add('e-overlay');
            } else if (e.requestType === 'Preview') {
                rteObj.getToolbar().querySelector('#custom_tbarbtn_2').parentElement.classList.remove('e-overlay');
                rteObj.getToolbar().querySelector('#custom_tbarbtn_3').parentElement.classList.remove('e-overlay');
            }
        }
        function quickToolbarOpenHandler(args) {
            if (!ej.base.isNullOrUndefined(args.targetElement) && args.targetElement.nodeName === 'IMG') {
                rteObj.getToolbar().querySelector('#custom_tbarbtn_2').parentElement.classList.add('e-overlay');
                rteObj.getToolbar().querySelector('#custom_tbarbtn_3').parentElement.classList.add('e-overlay');
            }

        }
        function quickToolbarClosehandler(args) {
            if (!ej.base.isNullOrUndefined(args.element) && args.element.classList.contains('e-rte-image-popup')) {
                rteObj.getToolbar().querySelector('#custom_tbarbtn_2').parentElement.classList.remove('e-overlay');
                rteObj.getToolbar().querySelector('#custom_tbarbtn_3').parentElement.classList.remove('e-overlay');
            }
        }
    </script>
}

@*custom code start*@

@section Meta{
    <meta name="description" content="This example demonstrates the Export to Word or PDF in the ASP.NET MVC Rich Text Editor control. Explore here for more details." />
}

@*custom code end*@

@section ActionDescription{
    <div id="action-description">
        <p>
            This example illustrates how to efficiently export content in the Rich Text Editor. You can seamlessly convert your content into a PDF or Word document.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>In this demo, the Rich Text Editor content can be exported using the service side,</p>
        <ol>
            <li>Clicking the export to PDF icon will export the content of the Rich Text Editor to a PDF document.</li>
            <li>Clicking the export to Word icon will export the content of the Rich Text Editor to a Word document.</li>
        </ol>
    </div>
}


@section Title{
    <title>ASP.NET MVC Rich Text Editor Export to Word or PDF Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Export to Word or PDF in ASP.NET MVC Rich Text Editor Control</h1>
}

