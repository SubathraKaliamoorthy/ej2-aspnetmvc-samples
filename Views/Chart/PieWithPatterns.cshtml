@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="control-section">
        <div id="container" style="text-align:center">
            @(Html.EJS().AccumulationChart("container").Series(series =>
            {
                series.Type(Syncfusion.EJ2.Charts.AccumulationType.Pie)
                    .XName("X")
                    .YName("Y")
                    .ApplyPattern(true)
                    .DataLabel(dl => dl.Visible(true).Name("Text").Position(Syncfusion.EJ2.Charts.AccumulationLabelPosition.Outside).Font(ft => ft.FontWeight("600")).ConnectorStyle(cs => cs.Length("20px").Type(Syncfusion.EJ2.Charts.ConnectorType.Curve)))
                    .Border(br => br.Width(2))
                    .DataSource(ViewBag.ChartPoints)
                    .Add();
            }
            ).EnableBorderOnMouseMove(false).Tooltip(tt => tt.Enable(true).EnableHighlight(true).Header("").Format("<b>${point.x}</b><br>Browser Share: <b>${point.y}%</b>")
            ).Title("Browser Market Share").LegendSettings(lg => lg.Visible(false)).Load("load").PointRender("pointRender").Render())
        </div>
    </div>
    <script>
        var load = function (args) {
            var selectedTheme = themeName ? themeName : 'Fluent2';
            args.accumulation.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast').replace(/5.3/i, '5');
            args.accumulation.width = ej.base.Browser.isDevice ? "100%" : "75%";
        };

        var pointRender = function (args) {
            if (args.point.index == 0) {
                args.pattern = 'DiagonalBackward';
            }
            else if (args.point.index == 1) {
                args.pattern = 'DiagonalForward';
            }
            else if (args.point.index == 2) {
                args.pattern = 'HorizontalStripe';
            }
            else if (args.point.index == 3) {
                args.pattern = 'VerticalStripe';
            }
            else if (args.point.index == 4) {
                args.pattern = 'HorizontalDash';
            }
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';
            if (selectedTheme.indexOf('dark') > -1) {
                if (selectedTheme.indexOf('material') > -1) {
                    args.border.color = '#303030';
                }
                else if (selectedTheme.indexOf('bootstrap5') > -1) {
                    args.border.color = '#212529';
                }
                else if (selectedTheme.indexOf('bootstrap') > -1) {
                    args.border.color = '#1A1A1A';
                }
                else if (selectedTheme.indexOf('fabric') > -1) {
                    args.border.color = '#201f1f';
                }
                else if (selectedTheme.indexOf('fluent') > -1) {
                    args.border.color = '#252423';
                }
                else if (selectedTheme.indexOf('bootstrap') > -1) {
                    args.border.color = '#1A1A1A';
                }
                else if (selectedTheme.indexOf('tailwind') > -1) {
                    args.border.color = '#1F2937';
                }
                else {
                    args.border.color = '#222222';
                }
            }
            else if (selectedTheme.indexOf('highcontrast') > -1) {
                args.border.color = '#000000';
            }
            else if (selectedTheme.indexOf('fluent2-highcontrast') > -1) {
                args.border.color = '#000000';
            }
            else {
                args.border.color = '#FFFFFF';
            }
        };
    </script>
}
@*custom code start*@
@section Meta{
    <meta name="description" content="This example demonstrates the Pie with Patterns in ASP.NET MVC Chart control. Explore here for more details." />
}
@*custom code end*@
@section ActionDescription{
    <p>
        This sample demonstrates the Mobile Browser Market Share using a pie chart with various patterns.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure a pie chart with different patterns. The pie chart is a circular graphic ideal for displaying categories as a proportion or percentage of the whole. You can apply different patterns to the pie slices using the <code>ApplyPattern</code> property in the series and the <code>PointRender</code> event.
    </p>
    <p>
        More information on the pie series can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/accumulation-chart/pie-dough-nut#pie-chart" aria-label="Navigate to the documentation for Pie Chart in ASP.NET MVC Accumulation Chart control">documentation section<span class="sr-only">opens in a new tab</span></a>.
    </p>
}
@section Title{
    <title>ASP.NET MVC Chart Pie with Patterns Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Charts</h1>
}