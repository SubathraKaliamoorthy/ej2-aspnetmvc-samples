@using Syncfusion.EJ2
@using Syncfusion.EJ2.Grids

@*custom code start*@

@{
    ViewBag.Title = "CustomAggregate";
}

@*custom code end*@

@section ControlsSection{
    <div class="control-section">
        @(Html.EJS().TreeGrid("CustomAggregate").DataSource((IEnumerable<object>)ViewBag.datasource).Columns(col =>
                    {
                        col.Field("ID").HeaderText("Order ID").Width(60).TextAlign(TextAlign.Right).Add();
                        col.Field("Name").HeaderText("Shipment Name").Width(170).Add();
                        col.Field("Category").HeaderText("Category").Width(250).Add();
                        col.Field("Units").HeaderText("Units").TextAlign(TextAlign.Right).Width(60).Add();
                        col.Field("UnitPrice").HeaderText("Unit Price").TextAlign(TextAlign.Right).Width(85).Format("C0").Add();
                        col.Field("Units").HeaderText("Units").TextAlign(TextAlign.Right).Format("C0").Width(90).Add();

                    })
                   .Aggregates(agg =>
                   {
                       agg.Columns(new List<Syncfusion.EJ2.TreeGrid.TreeGridAggregateColumn>() { new Syncfusion.EJ2.TreeGrid.TreeGridAggregateColumn() { Field = "Category", Type = "Custom", FooterTemplate = "Count of <input type='text' id='dropdown' /> : ${Custom}", CustomAggregate = "customAggregateFn" } }).Add();
                   }).ChildMapping("Children").Height(400).Width("Auto").DataBound("ondataBound").TreeColumnIndex(1).Render()
        )
    </div>
    <script>
        var value = "Frozen Seafood";
        var listObj;
        var foods = [
            { food: 'Frozen Seafood' },
            { food: 'Dairy' },
            { food: 'Edible' },
            { food: 'Solid crystals' },
        ];
        function ondataBound(args) {
            if (!ej.base.isNullOrUndefined(listObj)) {
                listObj.destroy();
            }
            listObj = new ej.dropdowns.DropDownList({
                dataSource: foods,
                fields: { value: 'food' },
                placeholder: 'Select a Category',
                width: '142px',
                value: value,
                change: function () {
                    setTimeout(function () {
                        var treegrid = document.getElementById("CustomAggregate").ej2_instances[0];
                        value = listObj.value.toString();
                        treegrid.refresh();
                    }, 300);
                }
            });
            listObj.appendTo('#dropdown');
        }
        function customAggregateFn(data) {
            var sampleData = ej.grids.getObject('result', data);
            var countLength;
            countLength = 0;
            sampleData.filter(function (item) {
                var data = ej.grids.getObject('Category', item);
                if (data === value) {
                    countLength++;
                }
            });
            return countLength;
        };
    </script>

    @*custom code start*@

    <style>
        .e-input {
            padding-bottom: 1px !important;
        }

        .e-summarycell.e-templatecell {
            pointer-events: visible !important;
        }

        .e-treegrid .e-summarycell.e-templatecell .e-input-group {
            width: 160px !important;
            input.e-control.e-dropdownlist.e-lib.e-input {
               padding-left: 6px !important;
            }
        }
        
    </style>

    @*custom code end*@
}

@*custom code start*@

@section Meta{
                    <meta name="description" content="This example demonstrates the Custom Aggregate in ASP.NET MVC Tree Grid control. Explore here for more details."/>
                }


@section ActionDescription{
    <div id="action-description">
        <p>This sample demonstrates custom aggregate functionality of the Tree Grid. In this sample, the custom aggregate value for the columns "Category" is displayed in column footer with dropdown to display the count of selected category name.</p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            The Tree Grid supports aggregates which will be displayed at the footer and every hierarchy level.
            The aggregate configurations can be provided by the <code>Aggregates</code> property.
        </p>
        <p>The built-in aggregates are,</p>
        <ul>
            <li><code>Sum</code></li>
            <li><code>Average</code></li>
            <li><code>Min</code></li>
            <li><code>Max</code></li>
            <li><code>Count</code></li>
            <li><code>TrueCount</code></li>
            <li><code>FalseCount</code></li>
            <li>
                <code>Custom</code> - Requires the <code>CustomAggregate</code> property to perform aggregation.
                The custom aggregate value can be accessed inside template using the key <code>${Custom}</code>
            </li>
        </ul>
        <p>
            In this demo, the footerTemplate property shows the custom aggregate value for the columns “Category” in column footer to display the count of category name.
        </p>
        <p>The template expression should be provided inside <code>${...}</code> the interpolation syntax.</p>
        <p>
            More information about aggregate can be found in this <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/tree-grid/aggregates/custom-aggregate" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
        </p>
    </div>

}

@*custom code end*@
@section Title{
                    <title>ASP.NET MVC Tree Grid Custom Aggregate Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Custom Aggregate in ASP.NET MVC Tree Grid Control</h1>
                }
