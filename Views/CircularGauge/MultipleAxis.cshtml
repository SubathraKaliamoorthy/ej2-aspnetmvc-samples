@using Syncfusion.EJ2
@section ControlsSection{
    <style>
        td {
            width: 40%;
        }
    </style>
    <div class="col-md-8 control-section">
        <div class="content-wrapper">
            @Html.EJS().CircularGauge("container").Load("onGaugeLoad").Title("Gauge with Multiple Axes").TitleStyle(new Syncfusion.EJ2.CircularGauge.CircularGaugeFont { Color = "gray", Size = "16px", Opacity = 1 }).Axes(ViewBag.Axes).Render()
        </div>
    </div>
    <div class="col-md-4 property-section">
        <div class="property-panel-section">
            <div class="property-panel-header">Properties</div>
            <div class="property-panel-content">
                <table title="Properties" style="width: 100%;">
                    <colgroup>
                        <col span="1" style="width: 45%;">
                        <col span="1" style="width: 40%;">
                        <col span="1" style="width: 10%;">
                    </colgroup>
                    <tbody>
                        <tr style="height: 50px">
                            <td>
                                <div> Axis </div>
                            </td>
                            <td>
                                <div>
                                    <select id="axisIndex" class="form-control">
                                        <option value="0" selected="true">Axis 1</option>
                                        <option value="1">Axis 2</option>
                                    </select>
                                </div>
                            </td>
                        </tr>
                        <tr style="height: 50px">
                            <td>
                                <div> Direction </div>
                            </td>
                            <td>
                                <div>
                                    <select id="axisDirection" class="form-control">
                                        <option value="ClockWise" selected="true">ClockWise</option>
                                        <option value="AntiClockWise">AntiClockWise</option>
                                    </select>
                                </div>
                            </td>
                        </tr>
                        <tr style="height: 50px">
                            <td>
                                <div>Start Angle </div>
                            </td>
                            <td>
                                <div>
                                    <input type="range" id="startAngle" value="220" min="0" max="360">
                                </div>
                            </td>
                            <td style="text-align:center;">
                                <div>
                                    <span id='start'>220</span>
                                </div>
                            </td>
                        </tr>
                        <tr style="height: 50px">
                            <td>
                                <div>End Angle </div>
                            </td>
                            <td>
                                <div>
                                    <input type="range" id="endAngle" value="140" min="0" max="360">
                                </div>
                            </td>
                            <td style="text-align:center;">
                                <div>
                                    <span id='end'>140</span>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div></div></div>

            <script type="text/javascript">
                var circulargauge;
                function onGaugeLoad(sender) {
                    if (window.gaugeLoaded)
                        return;
                    window.gaugeLoaded = true;
                    window.setTimeout(function () {
                        var gaugeWidth = document.getElementById('container').offsetWidth;
                        var svgWidth = document.getElementById('container_svg').offsetWidth;
                        if (gaugeWidth != svgWidth)
                            sender.gauge.refresh();
                    }, 200);
                    var selectedTheme = themeName ? themeName : 'Material';
                    sender.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/contrast/i, 'Contrast');
                    circulargauge = sender.gauge;
                }
                var axisIndex = 0;
                var axis;
                var direction;
                axis = new ej.dropdowns.DropDownList({
                    index: 0, width: '130%',
                    change: function () {
                        axisIndex = +axis.value;
                        direction.value = circulargauge.axes[axisIndex].direction;
                        var startAngle = circulargauge.axes[axisIndex].startAngle;
                        var endAngle = circulargauge.axes[axisIndex].endAngle;
                        document.getElementById('start').innerHTML = startAngle;
                        document.getElementById('end').innerHTML = endAngle;
                        document.getElementById('startAngle').value = startAngle.toString();
                        document.getElementById('endAngle').value = endAngle.toString();
                    }
                });
                axis.appendTo('#axisIndex');
                direction = new ej.dropdowns.DropDownList({
                    index: 0, width: '130%',
                    change: function () {
                        circulargauge.axes[axisIndex].direction = direction.value.toString();
                        circulargauge.axes[0].pointers[0].animation.enable = false;
                        circulargauge.axes[1].pointers[0].animation.enable = false;
                    }
                });
                direction.appendTo('#axisDirection');
                document.getElementById('startAngle').onpointermove = document.getElementById('startAngle').ontouchmove =
                    document.getElementById('startAngle').onchange = function () {
                        var value = parseInt(document.getElementById('startAngle').value, 10);
                        circulargauge.axes[0].pointers[0].animation.enable = false;
                        circulargauge.axes[1].pointers[0].animation.enable = false;
                        circulargauge.axes[axisIndex].startAngle = value;
                        document.getElementById('start').innerHTML = value;
                        circulargauge.axes[axisIndex].labelStyle.hiddenLabel =
                            ej.circulargauge.isCompleteAngle(circulargauge.axes[axisIndex].startAngle, circulargauge.axes[axisIndex].endAngle) ?
                                'First' : 'None';
                    };
                document.getElementById('endAngle').onpointermove = document.getElementById('endAngle').ontouchmove =
                    document.getElementById('endAngle').onchange = function () {
                        var value = parseInt(document.getElementById('endAngle').value, 10);
                        circulargauge.axes[0].pointers[0].animation.enable = false;
                        circulargauge.axes[1].pointers[0].animation.enable = false;
                        circulargauge.axes[axisIndex].endAngle = value;
                        document.getElementById('end').innerHTML = value;
                        circulargauge.axes[axisIndex].labelStyle.hiddenLabel =
                            ej.circulargauge.isCompleteAngle(circulargauge.axes[axisIndex].startAngle, circulargauge.axes[axisIndex].endAngle) ?
                                'First' : 'None';
                    };
            </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample visualizes the multiple axes in the gauge and options are available to change the direction, start, and end angle of an axis.
        </p>
    </div>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the MultipleAxis in ASP.NET MVC Circular Gauge control. Explore here for more details."/>
                }
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to render and configure multipe axes in gauge. Use <code>axes</code> collection
            to render multiple axis in gauge. Each axis can be customized with its own <code>pointer</code> and <code>scales</code>.
        </p>
        <br>
        <p>
            In this sample, two axes with a pointer has been used.
        </p>
        <p>
            More information on the axis can be found in this
            <a target="_blank" href="http://ej2.syncfusion.com/documentation">documentation section</a>.
        </p>
    </div>
}





@section Title{
                    <title>ASP.NET MVC Circular Gauge MultipleAxis Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of MultipleAxis in ASP.NET MVC Circular Gauge Control</h1>
                }