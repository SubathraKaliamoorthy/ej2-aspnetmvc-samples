@using Syncfusion.EJ2
@{
    ViewData["Title"] = "ESigningPdfForms";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using Syncfusion.EJ2
@using Syncfusion.EJ2.DropDowns
@using Syncfusion.EJ2.Navigations
@using Syncfusion.EJ2.Popups
@{
    string url = VirtualPathUtility.ToAbsolute("~/api/PdfViewer/FlattenDownload");
}
@{
    string dropdownMenu = "#e-pv-e-sign-dropdown-menu";
    string btntemplate = "#e-pv-e-sign-btn-template";
}

@section ControlsSection{
    <div class="e-pv-e-sign-control control-section" style="width:100%">
        @{
            List<object> userDetails = new List<object>
{
                  new { Name = "Andrew Fuller", Eimg = "profile2", Id = "ff0000", Mail = "andrew@mycompany.com", fieldIds = new List<int>() },
                  new { Name = "Anne Dodsworth", Eimg = "profile1", Id = "00ff00", Mail = "anne@mycompany.com", fieldIds = new List<int>() }
                };
            ViewData["userDetails"] = userDetails;
        }
        <div id="e-pv-e-sign-dropdown-menu" style="position: absolute; left: 0; z-index: 1000;">
            @Html.EJS().DropDownList("e-pv-e-sign-employees").DataSource((IEnumerable<object>)ViewData["userDetails"]).PopupHeight("200px").Index(0).Fields(new DropDownListFieldSettings { Text = "Name", Value = "Id" }).ItemTemplate("<div style='display: flex;'><img class='e-pv-e-sign-empImage' src='../Content/pdfviewer/images/employees/${Eimg}.png' style='margin: 10px 3px; border-radius: 50%; border: 1px solid ${getBorderColor(Mail)};' height='30px' width='30px' alt='employee'/><div><div class='e-pv-e-sign-ename' style='height: 18px; margin-left: 11px;'>${Name}</div><div class='e-pv-e-sign-ejob' style='margin-left: 10px;'>${Mail}</div></div></div>").ValueTemplate("<div style='display: flex;'><img id='user-img' class='valueTemp' src='../Content/pdfviewer/images/employees/${Eimg}.png' border-radius: 50%; border: 1px solid ${getBorderColor(Mail)};' height='30px' style='margin-left: 3px; alt='employee'/><div><div class='e-pv-e-sign-name' style='font-size:12px;margin-left: 10px;'>${Name}</div><div class='e-pv-e-sign-job' style='font-size:10px;margin-left: 9px;'>${Mail}</div></div></div>").Select("userChange").Render()
        </div>
        <div>
            @Html.EJS().Toolbar("e-pv-e-sign-toolbar-section").Height("50px").Items(new List<ToolbarItem>  {
               new ToolbarItem { Type = ItemType.Input, Template=@dropdownMenu, TooltipText = "User Dropdown",Align=ItemAlign.Left},
               new ToolbarItem { Type = ItemType.Input, Template=@btntemplate, TooltipText = "Finish Signing",Align=ItemAlign.Right,Click="finishSigning"},
            }).Render()
        </div>
        @Html.EJS().PdfViewer("pdfviewer").EnableToolbar(false).EnableAnnotationToolbar(false).EnableNavigationToolbar(false).DownloadFileName("eSign_designMode.pdf").ShowNotificationDialog(false).DocumentPath("https://cdn.syncfusion.com/content/pdf/eSign_filling.pdf").DocumentLoad("documentLoad").ResourceUrl("https://cdn.syncfusion.com/ej2/27.2.2/dist/ej2-pdfviewer-lib").FormFieldPropertiesChange("fieldChange").Height("640px").ToolbarSettings(ts => ts.ShowTooltip(true).ToolbarItems("OpenOption,PageNavigationTool,MagnificationTool,DownloadOption,PrintOption,FormDesignerEditTool")).ZoomMode(Syncfusion.EJ2.PdfViewer.ZoomMode.FitToPage).Render()
        <div>
            @Html.EJS().Dialog("modal_dialog").AnimationSettings(new DialogAnimationSettings() { Effect = DialogEffect.None }).IsModal(true).ContentTemplate(@<div>Content</div>).CloseOnEscape(true).Width("335px").Created("modalCreated").Buttons((List<DialogDialogButton>)ViewData["ModalButton"]).Visible(false).Render()
        </div>
        <div id="e-pv-e-sign-btn-template">
            @Html.EJS().Button("e-pv-e-sign-finishSigning").Content("Finish Signing").CssClass("e-outline").Render()
        </div>
    </div>
}

@section Meta{
    <meta name="description" content="This example demonstrates the Form Designer in ASP.NET MVC PDF Viewer control. Explore here for more details." />
}
@section ActionDescription{
    <div id="action-description">
        <p>This sample demonstrates the creation of the supported Form fields in the PDF Viewer such as Textbox, Password, Checkbox, Radio Button, Drop Down, List box, Signature, and Initial. We can also customize these fields and can include new fields through the user interaction by switching to the designer mode.</p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            More information on the PDF Viewer instantiation can be found on this
            <a target="_blank"
               href="https://ej2.syncfusion.com/aspnetmvc/documentation/pdfviewer/getting-started/" aria-label="documentation section">
                documentation section
                <span class="sr-only">opens in a new tab</span>
            </a>.
        </p>

    </div>
}
@*custom code start*@
<style>

    #pdfviewer {
        display: block;
        height: 640px;
    }

    .e-pv-e-sign-control {
        font-family: Roboto;
        font-size: 14px;
        font-style: normal;
        font-weight: 400;
        letter-spacing: 0.24px;
    }

    #e-pv-e-sign-toolbar-section {
        z-index: 1001;
        width: 100% !important;
        height: 48px !important;
        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15), 0px 1px 2px 0px rgba(0, 0, 0, 0.30);
    }

    #e-pv-e-sign-finishSigning {
        width: 125px !important;
        font-size: 12px;
        height: 28px;
        min-height: 0;
        padding: 0;
        border-radius: 16px;
        border: 1px solid;
    }

    #e-pv-e-sign-dropdown-menu {
        width: 210px;
        position: absolute;
        left: 0px;
    }

        #e-pv-e-sign-dropdown-menu .e-input-group {
            border: none;
        }

            #e-pv-e-sign-dropdown-menu .e-input-group:not(.e-float-icon-left):not(.e-float-input).e-input-focus::before,
            #e-pv-e-sign-dropdown-menu .e-input-group:not(.e-float-icon-left):not(.e-float-input).e-input-focus::after {
                width: 0px;
            }

    .e-pv-e-sign-ename {
        margin-top: 10px;
        font-size: 14px;
        font-family: Roboto;
        font-style: normal;
        font-weight: 400;
        line-height: 18px;
    }

    .e-pv-e-sign-ejob {
        font-size: 12px;
        font-family: Roboto;
        font-style: normal;
        font-weight: 400;
        line-height: 12px;
        letter-spacing: 0.2px;
    }

    .e-pv-e-sign-ename,
    .e-pv-e-sign-ejob {
        position: relative;
        right: 15px;
    }

    #e-pv-e-sign-dropdown-menu .e-input-group .e-control-wrapper .e-ddl e-lib .-keyboard .e-valid-input {
        border: none !important;
    }

    #e-pv-e-sign-employees_popup {
        width: 210px !important;
        z-index: 1000 !important;
    }
</style>
@*custom code end*@
<script>
    var pdfViewer;
    var currentUser = 'andrew@mycompany.com';
    var currentUserBorderColor = 'red';
    var preventChange = false;
    var state = false;
    var fileName = "eSign_designMode.pdf";
    var dialogObj;
    var otherFormFieldDetails;
    var currentFormFieldDetails;
    var formFieldCollections;
    var andrewBackground = '#ffefef';
    var anneBackground = '#eff7ef';
    var finishedBackground = '#daeaf7ff';

    var userDetails = [
        { Name: 'Andrew Fuller', Eimg: 'profile2', Id: "ff0000", Mail: "andrew@mycompany.com", fieldIds: [] },
        { Name: 'Anne Dodsworth', Eimg: 'profile1', Id: "00ff00", Mail: "anne@mycompany.com", fieldIds: [] }
    ];

    function userChange(args) {
        currentUser = args.itemData.Mail;
        if (args.itemData.Mail === 'andrew@mycompany.com') {
            document.getElementById('user-img').style.borderColor = 'red';
        } else {
            document.getElementById('user-img').style.borderColor = 'green';
        }
        updateUserFormField();
        if (preventChange) {
            document.getElementById('user-img').style.borderColor = 'red';
            args.cancel = true;
        }
    }

    function getBorderColor(email) {
        return email === 'andrew@mycompany.com' ? 'red' : 'green';
    }

    function modalCreated() {
        dialogObj = this;
    }

    function dlgButtonClick() {
        dialogObj.hide();
    }

    function updateUserFormField() {
        formFieldCollections = pdfViewer.formFieldCollections;
        otherFormFieldDetails = formFieldCollections.filter(formField => formField.customData.author === 'anne');
        currentFormFieldDetails = formFieldCollections.filter(formField => formField.customData.author === 'andrew');

        if (currentUser === 'andrew@mycompany.com') {
            otherFormFieldDetails.forEach(field => {
                if (field.value !== "") {
                    pdfViewer.formDesigner.updateFormField(field, { backgroundColor: finishedBackground });
                    pdfViewer.formDesignerModule.updateFormField(field, { isReadOnly: true });
                    currentFormFieldDetails.forEach(currentField => {
                        pdfViewer.formDesignerModule.updateFormField(currentField, { backgroundColor: andrewBackground, isReadOnly: true });
                    });
                } else {
                    currentFormFieldDetails.forEach(currentField => {
                        pdfViewer.formDesigner.updateFormField(currentField, { backgroundColor: andrewBackground });
                    });
                }
                var otherUserField = document.getElementById(field.id + '_content_html_element');
                if (otherUserField) {
                    var currentFormField = pdfViewer.formFieldCollections.find(formField => formField.id === field.id);
                    if (currentFormField.type !== 'DropDown') {
                        if (!currentFormField.value && otherUserField)
                            pdfViewer.formDesignerModule.updateFormField(currentFormField, { visibility: 'hidden' });
                    } else {
                        if (currentFormField.value.length !== 0 && otherUserField)
                            pdfViewer.formDesignerModule.updateFormField(currentFormField, { visibility: 'hidden' });
                    }
                }
            });
        } else {
            validation(currentFormFieldDetails);
            if (!state) {
                currentFormFieldDetails.forEach(field => {
                    pdfViewer.formDesignerModule.updateFormField(field, { backgroundColor: finishedBackground, isReadOnly: true });
                });
                otherFormFieldDetails.forEach(field => {
                    pdfViewer.formDesignerModule.updateFormField(field, { isReadOnly: false, backgroundColor: anneBackground, visibility: 'visible' });
                });
            }
        }
    }

    function validation(forms) {
        let errorMessage = "Required Field(s): ";
        let flag = false;
        let radioGroupName = "";
        let allFieldsValid = true;

        forms.forEach(form => {
            let text = "";
            if (form.isRequired) {
                switch (form.type.toString()) {
                    case "Checkbox":
                        if (!form.isChecked) {
                            text = form.name;
                            allFieldsValid = false;
                        }
                        break;
                    case "RadioButton":
                        if (!flag) {
                            radioGroupName = form.name;
                            if (form.isSelected) flag = true;
                        }
                        break;
                    case "DropdownList":
                        if (form.value.length === 0) {
                            text = form.name;
                            allFieldsValid = false;
                        }
                        break;
                    default:
                        if (!form.value || (typeof form.newValue === 'string' && form.newValue === "")) {
                            text = form.name;
                            allFieldsValid = false;
                        }
                        break;
                }
                if (text) {
                    errorMessage = errorMessage === "Required Field(s): " ? errorMessage + text : errorMessage + ", " + text;
                }
            }
        });

        if (!flag && radioGroupName) {
            errorMessage = errorMessage === "Required Field(s): " ? errorMessage + radioGroupName : errorMessage + ", " + radioGroupName;
            allFieldsValid = false;
        }

        if (errorMessage !== "Required Field(s): ") {
            state = true;
            dialogObj.content = errorMessage;
            dialogObj.show();
            preventChange = true;
        } else {
            state = false;
            preventChange = false;
        }
    }

    function fieldChange(args) {
        let errorMessage = "Required Field(s): ";
        const forms = pdfViewer.formFieldCollections;
        let flag = false;
        let allFieldsValid = true;
        let radioGroupName = "";

        forms.forEach(form => {
            let text = "";
            if (form.isRequired) {
                if (form.type.toString() === "Checkbox" && !form.isChecked) {
                    text = form.name;
                    allFieldsValid = false;
                } else if (form.type === "RadioButton" && !flag) {
                    radioGroupName = form.name;
                    if (form.isSelected) flag = true;
                } else if (form.type.toString() !== "Checkbox" && form.type !== "RadioButton" && (!form.value || (typeof args.newValue === 'string' && args.newValue === ""))) {
                    text = form.name;
                    allFieldsValid = false;
                } else if (form.type.toString() === "DropdownList" && form.value.length === 0) {
                    text = form.name;
                    allFieldsValid = false;
                }

                if (text) {
                    errorMessage = errorMessage === "Required Field(s): " ? errorMessage + text : errorMessage + ", " + text;
                }
            }
        });

        if (!flag && radioGroupName) {
            errorMessage = errorMessage === "Required Field(s): " ? errorMessage + radioGroupName : errorMessage + ", " + radioGroupName;
            allFieldsValid = false;
        }

        document.getElementById('e-pv-e-sign-finishSigning').disabled = !allFieldsValid;
    }
    function documentLoad() {
        document.getElementById('e-pv-e-sign-finishSigning').disabled = true;
        pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.designerMode = false;
        updateUserFormField();
    }

    function finishSigning() {
        pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        const url= "@url";
        for (const formField of pdfViewer.formFieldCollections) {
            pdfViewer?.formDesignerModule.updateFormField(formField, { backgroundColor: finishedBackground });
        }
        pdfViewer.saveAsBlob().then((blob) => {
            return convertBlobToBase64(blob);
        }).then((base64String) => {
            const xhr = new XMLHttpRequest();
            xhr.open('POST', url, true);
            xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
            const requestData = JSON.stringify({ base64String: base64String });
            xhr.onload = () => {
                if (xhr.status === 200) {
                    const responseBase64 = xhr.responseText.split('base64,')[1];
                    if (responseBase64) {
                        const blob = createBlobFromBase64(responseBase64, 'application/pdf');
                        const blobUrl = URL.createObjectURL(blob);
                        downloadDocument(blobUrl);
                        pdfViewer.load(xhr.responseText, null);
                        document.getElementById('e-pv-e-sign-finishSigning').disabled = true;
                        document.getElementById('e-pv-e-sign-employees').ej2_instances[0].enabled = false;
                    } else {
                        console.error('Invalid base64 response.');
                    }
                } else {
                    console.error('Download failed:', xhr.statusText);
                }
            };
            xhr.onerror = () => {
                console.error('An error occurred during the download:', xhr.statusText);
            };
            xhr.send(requestData);
        }).catch((error) => {
            console.error('Error saving Blob:', error);
        });
    }
    function convertBlobToBase64(blob) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsDataURL(blob);
            reader.onloadend = () => {
                if (typeof reader.result === 'string') {
                    resolve(reader.result);
                  } else {
                       reject(new Error('Failed to convert Blob to Base64'));
                    }
            };
            reader.onerror = (error) => reject(error);
        });
    }

    function createBlobFromBase64(base64String, contentType) {
        const sliceSize = 512;
        const byteCharacters = atob(base64String);
        const byteArrays = [];
        for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
            const slice = byteCharacters.slice(offset, offset + sliceSize);
            const byteNumbers = new Array(slice.length);
            for (let i = 0; i < slice.length; i++) {
                byteNumbers[i] = slice.charCodeAt(i);
            }
            const byteArray = new Uint8Array(byteNumbers);
            byteArrays.push(byteArray);
        }
        return new Blob(byteArrays, { type: contentType });
    }

    function downloadDocument(blobUrl) {
        const anchorElement = document.createElement('a');
        anchorElement.href = blobUrl;
        anchorElement.target = '_parent';
        const downloadFileName = pdfViewer.fileName || 'default.pdf';
        anchorElement.download = downloadFileName.endsWith('.pdf')
            ? downloadFileName
            : `${downloadFileName.split('.pdf')[0]}.pdf`;
        document.body.appendChild(anchorElement);
        anchorElement.click();
        document.body.removeChild(anchorElement);
        URL.revokeObjectURL(blobUrl);
    }
</script>
@*custom code end*@
@section Title{
    <title>ASP.NET MVC PDF Viewer eSigning PDF Forms Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of eSigning PDF Forms in ASP.NET MVC PDF Viewer Control</h1>
}
