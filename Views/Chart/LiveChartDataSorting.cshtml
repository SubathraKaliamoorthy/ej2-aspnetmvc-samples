@using Syncfusion.EJ2;
@using Newtonsoft.Json;
@section ControlsSection{
    <div class="control-section" align="center">
        @Html.EJS().Chart("LiveDataSorting").Series(series =>
        {
            series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column)
                .XName("X")
                .YName("Y")
                .ColumnWidth(0.7)
                .Marker(mr => mr.Visible(false).DataLabel(dl => dl.Visible(true).Position(Syncfusion.EJ2.Charts.LabelPosition.Top).Format("{value}").Angle(-90).Font(ft => ft.Color("#ffffff"))))
                .CornerRadius(cr => cr.TopLeft(5).TopRight(5))
                .DataSource(ViewBag.ChartPoints)
                .Add();
        }).PrimaryXAxis(px => px.ValueType(Syncfusion.EJ2.Charts.ValueType.Category).LabelRotation(-90).MajorGridLines(mg => mg.Width(0)).MajorTickLines(mt => mt.Width(0))
            .LineStyle(ls => ls.Width(0)).Border(br => br.Width(0)).LabelIntersectAction(Syncfusion.EJ2.Charts.LabelIntersectAction.None).Interval(1)
        ).PrimaryYAxis(py => py.Title("Nitrogen Fertilizer Use (KG/Ha)").Interval(30).LabelFormat("{value}").Border(br => br.Width(0)).LineStyle(ls => ls.Width(0)).MajorTickLines(mt => mt.Width(0))
        ).Title("Nitrogen Fertilizer Usage").ChartArea(area => area.Border(br => br.Width(0))).Load("load").PointRender("labelRender").AxisRangeCalculated("axisRangeCalculated").TextRender("textRender").Render()
    </div>

    @*custom code start*@
    <style>
        #control-container {
            padding: 0px !important;
        }
    </style>
    @*custom code end*@
    <script>
        var yearIndex = 1;
        var intervalId;

        var chartDataSets = [
            @Html.Raw(JsonConvert.SerializeObject(ViewBag.ChartPoints)),
            @Html.Raw(JsonConvert.SerializeObject(ViewBag.ChartPoints2)),
            @Html.Raw(JsonConvert.SerializeObject(ViewBag.ChartPoints3)),
            @Html.Raw(JsonConvert.SerializeObject(ViewBag.ChartPoints4)),
            @Html.Raw(JsonConvert.SerializeObject(ViewBag.ChartPoints5)),
            @Html.Raw(JsonConvert.SerializeObject(ViewBag.ChartPoints6)),
            @Html.Raw(JsonConvert.SerializeObject(ViewBag.ChartPoints7)),
            @Html.Raw(JsonConvert.SerializeObject(ViewBag.ChartPoints8)),
            @Html.Raw(JsonConvert.SerializeObject(ViewBag.ChartPoints9)),
            @Html.Raw(JsonConvert.SerializeObject(ViewBag.ChartPoints10))
        ];

        function load(args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast').replace(/5.3/i, '5'));
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "75%";
            args.chart.series[0].marker.dataLabel.enableRotation = ej.base.Browser.isDevice ? true : false;

            updateClearInterval();

            intervalId = setInterval(function () {
                var container = document.getElementById('LiveDataSorting');
                if (container && container.id === args.chart.element.id) {
                    var newData = (chartDataSets[yearIndex] || []).map(function (item) {
                        return { X: item.X, Y: item.Y };
                    });
                    if (args.chart.series.length > 0) {
                        var newSource = new ej.charts.sort(newData, ['Y'], true);
                        args.chart.series[0].setData(newSource, 1400);
                    }
                    yearIndex = yearIndex < 9 ? yearIndex + 1 : 1;
                } else {
                    updateClearInterval();
                }
            }, 2000);
        };
        function updateClearInterval() {
            if (intervalId) {
                clearInterval(intervalId);
                intervalId = null;
            }
        };
        function labelRender(args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';
            var fabricColors = ['#4472c4', '#ed7d31', '#ffc000', '#70ad47', '#5b9bd5',
                '#c1c1c1', '#6f6fe2', '#e269ae', '#9e480e', '#997300', '#4472c4', '#70ad47', '#ffc000', '#ed7d31'];
            var materialColors = ['#00bdae', '#404041', '#357cd2', '#e56590', '#f8b883', '#70ad47', '#dd8abd', '#7f84e8', '#7bb4eb',
                '#ea7a57', '#404041', '#00bdae'];
            var highContrastColors = ['#79ECE4', '#E98272', '#DFE6B6', '#C6E773', '#BA98FF',
                '#FA83C3', '#00C27A', '#43ACEF', '#D681EF', '#D8BC6E'];
            var bootstrapColors = ['#a16ee5', '#f7ce69', '#55a5c2', '#7ddf1e', '#ff6ea6',
                '#7953ac', '#b99b4f', '#407c92', '#5ea716', '#b91c52'];
            var fluent2Colors = ["#6200EE", "#09AF74", "#0076E5", "#CB3587", "#E7910F", "#0364DE", "#66CD15", "#F3A93C", "#107C10",
                "#C19C00"];
            var fluent2HighContrastColors = ["#9BB449", "#2A72D5", "#43B786", "#3F579A", "#584EC6", "#E85F9C", "#6E7A89", "#EA6266",
                "#0B6A0B", "#C19C00"];
            var tailwindColors = ["#5A61F6", "#65A30D", "#334155", "#14B8A6", "#8B5CF6", "#0369A1", "#F97316", "#9333EA", "#F59E0B", "#15803D"];
            var tailwindDarkColors = ["#8B5CF6", "#22D3EE", "#F87171", "#4ADE80", "#E879F9", "#FCD34D", "#F97316", "#2DD4BF", "#F472B6", "#10B981"];
            var tailwind3Colors = ['#2F4074', '#03B4B4', '#0D72DE', '#FF5733', '#D63384', '#F39C12', '#EF291F', '#91C822', '#2F4074', '#03B4B4'];
            var tailwind3DarkColors = ['#8029F1', '#1ABC9C', '#0D72DE', '#FF5733', '#D63384', '#F39C12', '#EF291F', '#91C822', '#8029F1', '#1ABC9C'];
            if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {
                args.fill = fabricColors[args.point.index % 10];
            } else if (selectedTheme === 'material') {
                args.fill = materialColors[args.point.index % 10];
            } else if (selectedTheme === 'highcontrast') {
                args.fill = highContrastColors[args.point.index % 10];
            } else if (selectedTheme === 'fluent2') {
                args.fill = fluent2Colors[args.point.index % 10];
            } else if (selectedTheme === 'fluent2-highcontrast' || selectedTheme === 'fluent2-dark') {
                args.fill = fluent2HighContrastColors[args.point.index % 10];
            } else if (selectedTheme === 'tailwind') {
                args.fill = tailwindColors[args.point.index % 10];
            } else if (selectedTheme === 'tailwind-dark') {
                args.fill = tailwindDarkColors[args.point.index % 10];
            } else if (selectedTheme === 'tailwind3') {
                args.fill = tailwind3Colors[args.point.index % 10];
            } else if (selectedTheme === 'tailwind3-dark') {
                args.fill = tailwind3DarkColors[args.point.index % 10];
            } else {
                args.fill = bootstrapColors[args.point.index % 10];
            }
        };
        function axisRangeCalculated(args) {
            if (args.axis.name === 'primaryYAxis') {
                if (args.maximum > 120) {
                    args.interval = 30;
                }
                else {
                    args.interval = 20;
                }
                if (args.maximum > 150) {
                    args.maximum = 150;
                }
            }
        };
        function textRender (args) {
            if (ej.base.Browser.isDevice) {
                args.series.marker.dataLabel.font.size = '10px';
            }
        };
    </script>
}
@*custom code start*@
@section Meta{
    <meta name="description" content="This example demonstrates the Live Data Sorting in ASP.NET MVC Chart control. Explore here for more details." />
}
@*custom code end*@
@section ActionDescription{
    <p>
        This column chart demonstrates the dynamic updating of data in real-time. The chart visualizes nitrogen fertilizer use per hectare of cropland, updating every few seconds to show sorted data over a span of years.
    </p>
}
@section Description{
    <p>
        In this example, you can observe how the column chart updates dynamically with sorted data using the <code>SetData</code> method. The data shows nitrogen fertilizer usage from 2010 to 2019, and the chart periodically updates and sorts its data to reflect the latest information.
    </p>
    <p>
        More information on the column series can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/chart/chart-types/column" aria-label="Navigate to the documentation for Column Chart in ASP.NET MVC Chart control">documentation section<span class="sr-only">opens in a new tab</span></a>.
    </p>
}
@section Title{
    <title>ASP.NET MVC Chart Live Data Sorting Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Charts</h1>
}