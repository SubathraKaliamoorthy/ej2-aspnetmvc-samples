@using System.Drawing
@using Syncfusion.EJ2;
<script src="~/Scripts/theme-color.js"></script>
@section ControlsSection{
<div>
    <div class="control-section">
        <div class="content-wrapper">
            <div style="text-align:center">

   @Html.EJS().Chart("container").Series(series =>
   {
       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column).XName("Fruits").YName("Sales")
       .Marker(mr=>mr.DataLabel(dl=>dl.Visible(true).Position(Syncfusion.EJ2.Charts.LabelPosition.Outer))).DataSource(ViewBag.ChartPoints).Add();
   }).PrimaryXAxis(px => px.ValueType(Syncfusion.EJ2.Charts.ValueType.Category).MajorGridLines(mg=>mg.Width(0)).MinorGridLines(mg=>mg.Width(0)).IsIndexed(true).Interval(1).LabelRotation(90).LabelIntersectAction(Syncfusion.EJ2.Charts.LabelIntersectAction.None)
       ).PrimaryYAxis(py => py.Maximum(120).Minimum(0).Interval(30).MajorTickLines(mt=>mt.Width(0)).LineStyle(ls=>ls.Width(0)).LabelStyle(ls => ls.Color("transparent"))
       ).Title("Fruits and Vegetables - Season").ChartArea(area => area.Border(br => br.Width(0))).LegendSettings(lg=>lg.Visible(false)).Load("load").PointRender("labelRender").Render()

            </div>
        </div>
    </div>
</div>
@*custom code start*@
<style>
    #control-container {
        padding: 0px !important;
    }
</style>
@*custom code end*@
    <script>
        var labelRender = function (args) {
            let pointMaterialColors = ["#00bdae", "#404041", "#357cd2", "#e56590", "#f8b883", "#70ad47", "#dd8abd", "#7f84e8", "#7bb4eb",
                        "#ea7a57", "#404041", "#00bdae"];
            let pointMaterialDarkColors = ["#9ECB08", "#56AEFF", "#C57AFF", "#61EAA9", "#EBBB3E", "#F45C5C", "#8A77FF", "#63C7FF", "#FF84B0",
                        "#F7C928"];
            let pointFabricColors = ["#4472c4", "#ed7d31", "#ffc000", "#70ad47", "#5b9bd5", "#c1c1c1", "#6f6fe2", "#e269ae", "#9e480e",
                        "#997300", "#4472c4", "#70ad47", "#ffc000", "#ed7d31"];
            let pointBootstrapColors = ["#a16ee5", "#f7ce69", "#55a5c2", "#7ddf1e", "#ff6ea6", "#7953ac", "#b99b4f", "#407c92", "#5ea716",
                        "#b91c52"];
            let pointHighContrastColors = ["#79ECE4", "#E98272", "#DFE6B6", "#C6E773", "#BA98FF", "#FA83C3", "#00C27A", "#43ACEF", "#D681EF",
                        "#D8BC6E"];
            let pointBootstrap5Colors = ['#FD7E14', '#6610F2', '#6F42C1', '#D63384', '#DC3545', '#FFC107', '#198754', '#0DCAF0', '#FD7E14', '#6610F2'];
            let pointBootstrap5DarkColors = ['#FD7E14', '#6610F2', '#6F42C1', '#D63384', '#DC3545', '#FFC107', '#198754', '#0DCAF0', '#FD7E14', '#6610F2'];
            let pointFluentColors = ['#1AC9E6', '#DA4CB2', '#EDBB40', '#AF4BCF', '#FF7266', '#1BD565', '#EE993D', '#5887FF', '#EC548D',
                        '#7D39C0'];
            let pointFluentDarkColors = ['#1AC9E6', '#DA4CB2', '#EDBB40', '#AF4BCF', '#FF7266', '#1BD565', '#EE993D', '#5887FF', '#EC548D',
                        '#7D39C0'];
            let pointTailwindColors = ["#5A61F6", "#65A30D", "#334155", "#14B8A6", "#8B5CF6", "#0369A1", "#F97316", "#9333EA", "#F59E0B",
                        "#15803D"];
            let pointTailwindDarkColors = ["#8B5CF6", "#22D3EE", "#F87171", "#4ADE80", "#E879F9", "#FCD34D", "#F97316", "#2DD4BF", "#F472B6",
                        "#10B981"];
            let pointMaterial3Colors = ["#6355C7", "#00AEE0", "#FFB400", "#F7523F", "#963C70", "#FD7400", "#4BE0BC", "#2196F5", "#DE3D8A", "#162F88"];
            let pointMaterial3DarkColors = ["#4EAAFF", "#FA4EAB", "#FFF500", "#17EA58", "#38FFE7", "#FF9E45", "#B3F32F", "#B93CE4", "#FC5664", "#9B55FF"];
            let pointFluent2Colors = ["#6200EE", "#09AF74", "#0076E5", "#CB3587", "#E7910F", "#0364DE", "#66CD15", "#F3A93C", "#107C10",
                "#C19C00"];
            let pointFluent2HighContrastColors = ["#9BB449", "#2A72D5", "#43B786", "#3F579A", "#584EC6", "#E85F9C", "#6E7A89", "#EA6266",
                "#0B6A0B", "#C19C00"];
            let selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';
            
            if (selectedTheme==='material-dark')
            {
                args.border.color = pointMaterialDarkColors[args.point.index % 10];
            }
            else if(selectedTheme==='material')
            {
                args.fill = pointMaterialColors[args.point.index % 10];
            }
            else if (selectedTheme==='fabric-dark' || selectedTheme==='fabric')
            {
                args.fill= pointFabricColors[args.point.index % 10];
            }
            else if (selectedTheme==='bootstrap5-dark')
            {
                args.fill = pointBootstrap5DarkColors[args.point.index % 10];
            }
            else if (selectedTheme==='bootstrap5')
            {
                args.fill = pointBootstrap5Colors[args.point.index % 10];
            }
            else if (selectedTheme==='fluent-dark')
            {
                args.fill = pointFluentDarkColors[args.point.index % 10];
            }
            else if (selectedTheme==='fluent')
            {
                args.fill = pointFluentColors[args.point.index % 10];
            }
            else if (selectedTheme==='bootstrap4' || selectedTheme==='bootstrap')
            {
                args.fill = pointBootstrapColors[args.point.index % 10];           
            }
            else if (selectedTheme==='tailwind-dark')
            {
                args.fill = pointTailwindDarkColors[args.point.index % 10];                             
            }
            else if (selectedTheme==='tailwind')
            {                    
                args.fill = pointTailwindColors[args.point.index % 10];
            }
            else if (selectedTheme==='highcontrast')
            {
                args.fill = pointHighContrastColors[args.point.index % 10];           
            }
            else if (selectedTheme === 'material3') {
                args.fill = pointMaterial3Colors[args.point.index % 10];
            }
            else if (selectedTheme === 'material3-dark') {
                args.fill = pointMaterial3DarkColors[args.point.index % 10];
            }
            else if (selectedTheme === 'fluent2') {
                args.fill = pointFluent2Colors[args.point.index % 10];
            }
            else if (selectedTheme === 'fluent2-highcontrast' || selectedTheme === 'fluent2-dark') {
                args.fill = pointFluent2HighContrastColors[args.point.index % 10];
            }
            else
            {
                args.fill = pointBootstrapColors[args.point.index % 10];           
            }
        };
        var load = function (args) {
            var selectedTheme = themeName ? themeName : 'Fluent2';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast').replace(/5.3/i, '5');
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "75%";
            args.chart.primaryXAxis.border = { type: "Rectangle", width: 1 };
            args.chart.primaryXAxis.multiLevelLabels = (ej.base.Browser.isDevice ? ([
                {
                    border: { type: 'Rectangle' },
                    categories: [
                        { start: -0.5, end: 2.5, text: 'In Season', },
                        { start: 2.5, end: 5.5, text: 'Out of Season', },
                        { start: 5.5, end: 7.5, text: 'In Season', },
                        { start: 7.5, end: 9.5, text: 'Out of Season', },
                    ]
                }, {
                    border: { type: 'Rectangle' },
                    textStyle: { fontWeight: 'Bold' },
                    categories: [
                        { start: -0.5, end: 5.5, text: 'Fruits', },
                        { start: 5.5, end: 9.5, text: 'Vegetables', },
                    ]
                }]) : [
                    {
                        border: { type: 'Rectangle' },
                        categories: [
                            { start: -0.5, end: 0.5, text: 'Seedless', },
                            { start: 0.5, end: 2.5, text: 'Seeded', },
                            { start: 2.5, end: 3.5, text: 'Seedless', },
                            { start: 3.5, end: 5.5, text: 'Seeded', },
                            { start: 5.5, end: 6.5, text: 'Seedless', },
                            { start: 6.5, end: 7.5, text: 'Seeded', },
                            { start: 7.5, end: 8.5, text: 'Seedless', },
                            { start: 8.5, end: 9.5, text: 'Seeded', }
                        ]
                    }, {
                        border: { type: 'Rectangle' },
                        categories: [
                            { start: -0.5, end: 2.5, text: 'In Season', },
                            { start: 2.5, end: 5.5, text: 'Out of Season', },
                            { start: 5.5, end: 7.5, text: 'In Season', },
                            { start: 7.5, end: 9.5, text: 'Out of Season', },
                        ]
                    }, {
                        border: { type: 'Rectangle' },
                        textStyle: { fontWeight: 'Bold' },
                        categories: [
                            { start: -0.5, end: 5.5, text: 'Fruits', },
                            { start: 5.5, end: 9.5, text: 'Vegetables', },
                        ]
                    }])
        };
    </script>
}
 @*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the MultiLevel Labels in ASP.NET MVC Chart control. Explore here for more details."/>
                }
 @*custom code end*@
@section ActionDescription{
    <p>
        This example shows multilevel labels in the chart axis. We can add layers of labels to the axis using start and end range values.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to group axis labels based on ranges by using <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.Charts.ChartMultiLevelLabels.html" aria-label="ChartMultiLevelLabels">ChartMultiLevelLabels<span class="sr-only">opens in a new tab</span></a>. You can customize the text in each level by using <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.Charts.ChartMultiLevelLabel.html#Syncfusion_EJ2_Charts_ChartMultiLevelLabel_Border" aria-label="ChartAxisMultiLevelLabelBorder">ChartAxisMultiLevelLabelBorder<span class="sr-only">opens in a new tab</span></a> and <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.Charts.ChartMultiLevelLabel.html#Syncfusion_EJ2_Charts_ChartMultiLevelLabel_TextStyle" aria-label="ChartAxisMultiLevelLabelTextStyle">ChartAxisMultiLevelLabelTextStyle<span class="sr-only">opens in a new tab</span></a>.
    </p>
    <p>
        Axis labels in each level can be arranged smartly using the <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.Charts.ChartMultiLevelLabel.html#Syncfusion_EJ2_Charts_ChartMultiLevelLabel_Overflow" aria-label="Overflow">Overflow<span class="sr-only">opens in a new tab</span></a> property. Its values and their behaviors are:
    </p>
    <ul>
        <li><b><a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.Charts.LabelIntersectAction.html#fields" aria-label="Trim">Trim<span class="sr-only">opens in a new tab</span></a></b> - Trim the label when it intersect.</li>
        <li><b><a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.Charts.LabelIntersectAction.html#fields" aria-label="Wrap">Wrap<span class="sr-only">opens in a new tab</span></a></b> - Wrap the label when it intersect.</li>
        <li><b><a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.Charts.LabelIntersectAction.html#fields" aria-label="None">None<span class="sr-only">opens in a new tab</span></a></b> - Shows all the labels.</li>
    </ul>
    <p>
        More information about the multiple level labels can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/chart/axis-labels#multilevel-labels" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
    </p>
}
@section Title{
                    <title>ASP.NET MVC Chart MultiLevel Labels Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of MultiLevel Labels in ASP.NET MVC Chart Control</h1>
                }