@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="control-section">
        <div style="text-align:center">
            <div>
                @(Html.EJS().Chart("keyboard_container").EnableSideBySidePlacement(false).SelectionMode(Syncfusion.EJ2.Charts.SelectionMode.Point).SelectionPattern(Syncfusion.EJ2.Charts.SelectionPattern.DiagonalForward).LegendClick("labelRender").Load("load")
                    .EnableAnimation(false).ChartArea(area => area.Border(br => br.Width(0))).ZoomSettings(zoom => zoom.EnableSelectionZooming(true))
                    .Series(series => {
                        series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column).
                        XName("Month").
                        YName("Sales").Opacity(1).Animation(an => an.Enable(false)).
                        DataSource(ViewBag.Quarter1).
                        Name("Quarter 1").
                        Width(2).Add();
                        series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column).
                        XName("Month").
                        YName("Sales").Opacity(1).Animation(an => an.Enable(false)).
                        DataSource(ViewBag.Quarter2).
                        Name("Quarter 2").
                        Width(2).Add();
                        series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column).
                        XName("Month").
                        YName("Sales").Opacity(1).Animation(an => an.Enable(false)).
                        DataSource(ViewBag.Quarter3).
                        Name("Quarter 3").
                        Width(2).Add();
                        series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column).
                        XName("Month").
                        YName("Sales").Opacity(1).Animation(an => an.Enable(false)).
                        DataSource(ViewBag.Quarter4).
                        Name("Quarter 4").
                        Width(2).Add();
                    })
                    .PrimaryYAxis(py => py.Maximum(120).Title("Sales in Percentage").LineStyle(ls => ls.Width(0)).MajorTickLines(mt => mt.Width(0)).LabelFormat("{value}%").StripLines(ViewBag.yAxisStrips))
                    .PrimaryXAxis(px => px.Interval(1).ValueType(Syncfusion.EJ2.Charts.ValueType.Category).MajorGridLines(mg => mg.Width(0)).LabelStyle(ls => ls.Size("0px")).MajorTickLines(mt => mt.Width(0)))
                    .Title("Quarterly Sales Chart").Tooltip(tp => tp.Enable(true)).LegendSettings(legend => legend.Visible(true))
                    .Render()
                )
            </div>
        </div>
    </div>
    @*custom code start*@
    <style>
        #control-container {
            padding: 0px !important;
        }
    </style>
    @*custom code end*@
    <script>
        var materialColors = ["#00bdae", "#404041", "#357cd2", "#e56590", "#f8b883", "#70ad47", "#dd8abd", "#7f84e8", "#7bb4eb",
            "#ea7a57", "#404041", "#00bdae"];
        var materialDarkColors = ["#9ECB08", "#56AEFF", "#C57AFF", "#61EAA9", "#EBBB3E", "#F45C5C", "#8A77FF", "#63C7FF", "#FF84B0",
            "#F7C928"];
        var fabricColors = ["#4472c4", "#ed7d31", "#ffc000", "#70ad47", "#5b9bd5", "#c1c1c1", "#6f6fe2", "#e269ae", "#9e480e",
            "#997300", "#4472c4", "#70ad47", "#ffc000", "#ed7d31"];
        var bootstrapColors = ["#a16ee5", "#f7ce69", "#55a5c2", "#7ddf1e", "#ff6ea6", "#7953ac", "#b99b4f", "#407c92", "#5ea716",
            "#b91c52"];
        var highContrastColors = ["#79ECE4", "#E98272", "#DFE6B6", "#C6E773", "#BA98FF", "#FA83C3", "#00C27A", "#43ACEF", "#D681EF",
            "#D8BC6E"];
        var bootstrap5Colors = ['#FD7E14', '#6610F2', '#6F42C1', '#D63384', '#DC3545', '#FFC107', '#198754', '#0DCAF0'];
        var bootstrap5DarkColors = ['#FD7E14', '#6610F2', '#6F42C1', '#D63384', '#DC3545', '#FFC107', '#198754', '#0DCAF0'];
        var fluentColors = ['#1AC9E6', '#DA4CB2', '#EDBB40', '#AF4BCF', '#FF7266', '#1BD565', '#EE993D', '#5887FF', '#EC548D',
            '#7D39C0'];
        var fluentDarkColors = ['#1AC9E6', '#DA4CB2', '#EDBB40', '#AF4BCF', '#FF7266', '#1BD565', '#EE993D', '#5887FF', '#EC548D',
            '#7D39C0'];
        var fabricDark = ["#4472C4", "#ED7D31", "#FFC000", "#70AD47"];
        var bootstrap4Colors = ['#a16ee5', '#f7ce69', '#55a5c2', '#7ddf1e', '#ff6ea6', '#7953ac', '#b99b4f', '#407c92', '#5ea716', '#b91c52'];
        var bootstrapdarkColors = ["#a16ee5", "#f7ce69", "#55a5c2", "#7ddf1e", "#ff6ea6", "#7953ac", "#b99b4f", "#407c92", "#5ea716", "#b91c52"];
        var material3Colors = ["#6355C7", "#00AEE0", "#FFB400", "#F7523F", "#963C70", "#FD7400", "#4BE0BC", "#2196F5", "#DE3D8A", "#162F88"];
        var material3DarkColors = ["#4EAAFF", "#FA4EAB", "#FFF500", "#17EA58", "#38FFE7", "#FF9E45", "#B3F32F", "#B93CE4", "#FC5664", "#9B55FF"];
        var fluent2Colors = ["#6200EE", "#09AF74", "#0076E5", "#CB3587", "#E7910F", "#0364DE", "#66CD15", "#F3A93C", "#107C10",
            "#C19C00"];
        var fluent2HighContrastColors = ["#9BB449", "#2A72D5", "#43B786", "#3F579A", "#584EC6", "#E85F9C", "#6E7A89", "#EA6266",
            "#0B6A0B", "#C19C00"];
        var tailwindColors = ["#5A61F6", "#65A30D", "#334155", "#14B8A6", "#8B5CF6", "#0369A1", "#F97316", "#9333EA", "#F59E0B", "#15803D"];
        var tailwindDarkColors = ["#8B5CF6", "#22D3EE", "#F87171", "#4ADE80", "#E879F9", "#FCD34D", "#F97316", "#2DD4BF", "#F472B6", "#10B981"];
        var tailwind3Colors = ['#2F4074', '#03B4B4', '#0D72DE', '#FF5733', '#D63384', '#F39C12', '#EF291F', '#91C822', '#2F4074', '#03B4B4'];
        var tailwind3DarkColors = ['#8029F1', '#1ABC9C', '#0D72DE', '#FF5733', '#D63384', '#F39C12', '#EF291F', '#91C822', '#8029F1', '#1ABC9C'];

        var FontColor = "#353535";
        var seriesIndex = 0;
        var Segments = [[0, 5], [7, 12], [14, 19], [21, 26]];

        var getStriplineValues = function (legendClickedName) {
            var chart = document.getElementById('keyboard_container').ej2_instances[0];
            for (var i = 0; i < chart.series.length; i++) {
                var name = chart.series[i].name;
                var visible = name === legendClickedName ? !chart.series[i].visible : chart.series[i].visible;
                if (seriesIndex > 3) {
                    seriesIndex = 0;
                }
                if (name == "Quarter 1") {
                    chart.primaryYAxis.stripLines[0].visible = chart.primaryYAxis.stripLines[1].visible = visible;
                    if (chart.primaryYAxis.stripLines[0].visible) {
                        chart.primaryYAxis.stripLines[0].segmentStart = chart.primaryYAxis.stripLines[1].segmentStart = Segments[seriesIndex][0];
                        chart.primaryYAxis.stripLines[0].segmentEnd = chart.primaryYAxis.stripLines[1].segmentEnd = Segments[seriesIndex][1];
                        seriesIndex++;
                    }
                }
                else if (name == "Quarter 2") {
                    chart.primaryYAxis.stripLines[2].visible = chart.primaryYAxis.stripLines[3].visible = visible;
                    if (chart.primaryYAxis.stripLines[2].visible) {
                        chart.primaryYAxis.stripLines[2].segmentStart = chart.primaryYAxis.stripLines[3].segmentStart = Segments[seriesIndex][0];
                        chart.primaryYAxis.stripLines[2].segmentEnd = chart.primaryYAxis.stripLines[3].segmentEnd = Segments[seriesIndex][1];
                        seriesIndex++;
                    }
                }
                else if (name == "Quarter 3") {
                    chart.primaryYAxis.stripLines[4].visible = chart.primaryYAxis.stripLines[5].visible = visible;
                    if (chart.primaryYAxis.stripLines[4].visible) {
                        chart.primaryYAxis.stripLines[4].segmentStart = chart.primaryYAxis.stripLines[5].segmentStart = Segments[seriesIndex][0];
                        chart.primaryYAxis.stripLines[4].segmentEnd = chart.primaryYAxis.stripLines[5].segmentEnd = Segments[seriesIndex][1];
                        seriesIndex++;
                    }
                }
                else {
                    chart.primaryYAxis.stripLines[6].visible = chart.primaryYAxis.stripLines[7].visible = visible;
                    if (chart.primaryYAxis.stripLines[6].visible) {
                        chart.primaryYAxis.stripLines[6].segmentStart = chart.primaryYAxis.stripLines[7].segmentStart = Segments[seriesIndex][0];
                        chart.primaryYAxis.stripLines[6].segmentEnd = chart.primaryYAxis.stripLines[7].segmentEnd = Segments[seriesIndex][1];
                        seriesIndex++;
                    }
                }
            }
            chart.refresh();
        };

        var load = function (args) {
            var selectedTheme = themeName ? themeName : 'Fluent2';
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "75%";
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast').replace(/5.3/i, '5');
            FontColor = args.chart.theme.indexOf("dark") > -1 || args.chart.theme.indexOf("highcontrast") > -1 ? "#F3F2F1" : "#353535";
            let FillColors;
            let TextColor;
            if (args.chart.theme === 'MaterialDark') {
                FillColors = materialDarkColors;
                TextColor = "#FFFFFF";
            }
            else if (args.chart.theme === 'Material') {
                FillColors = materialColors;
                TextColor = "#000000";
            }
            else if (args.chart.theme === "Fabric") {
                FillColors = fabricColors;
                TextColor = "#000000";
            }
            else if (args.chart.theme === 'FabricDark') {
                FillColors = fabricDark;
                TextColor = "#FFFFFF";
            }
            else if (args.chart.theme === 'Bootstrap5Dark') {
                FillColors = bootstrap5DarkColors;
                TextColor = "#FFFFFF";
            }
            else if (args.chart.theme === 'Bootstrap4') {
                FillColors = bootstrap4Colors;
                TextColor = "#000000";
            }
            else if (args.chart.theme === 'Bootstrap5') {
                FillColors = bootstrap5Colors;
                TextColor = "#000000";
            }
            else if (args.chart.theme === "Bootstrap") {
                FillColors = bootstrapColors;
                TextColor = "#000000";
            }
            else if (args.chart.theme === 'BootstrapDark') {
                FillColors = bootstrapdarkColors;
                TextColor = "#FFFFFF";
            }
            else if (args.chart.theme === 'TailwindDark') {
                FillColors = tailwindDarkColors;
                TextColor = "#FFFFFF";
            }
            else if (args.chart.theme === 'Tailwind') {
                FillColors = tailwindColors;
                TextColor = "#000000";
            }
            else if (args.chart.theme === 'Tailwind3Dark') {
                FillColors = tailwind3DarkColors;
                TextColor = "#FFFFFF";
            }
            else if (args.chart.theme === 'Tailwind3') {
                FillColors = tailwind3Colors;
                TextColor = "#000000";
            }
            else if (args.chart.theme === "HighContrast") {
                FillColors = highContrastColors;
                TextColor = "#FFFFFF";
            }
            else if (args.chart.theme === 'Fluent') {
                FillColors = fluentColors;
                TextColor = '#000000'
            }
            else if (args.chart.theme === 'FluentDark') {
                FillColors = fluentDarkColors;
                TextColor = "#FFFFFF";
            }
            else if (args.chart.theme === 'Material3') {
                FillColors = material3Colors;
                TextColor = "#000000";
            }
            else if (args.chart.theme === 'Material3Dark') {
                FillColors = material3DarkColors;
                TextColor = "#FFFFFF";
            }
            else if (args.chart.theme === 'Fluent2') {
                FillColors = fluent2Colors;
                TextColor = "#000000";
            }
            else if (args.chart.theme === 'Fluent2HighContrast' || args.chart.theme === 'Fluent2Dark') {
                FillColors = fluent2HighContrastColors;
                TextColor = "#FFFFFF";
            }
            else {
                FillColors = fluentColors;
                TextColor = "#FFFFFF";
            }
            args.chart.primaryYAxis.stripLines[0].color = FillColors[0 % 10];
            args.chart.primaryYAxis.stripLines[1].textStyle.color = TextColor;
            args.chart.primaryYAxis.stripLines[2].color = FillColors[1 % 10];
            args.chart.primaryYAxis.stripLines[3].textStyle.color = TextColor;
            args.chart.primaryYAxis.stripLines[4].color = FillColors[2 % 10];
            args.chart.primaryYAxis.stripLines[5].textStyle.color = TextColor;
            args.chart.primaryYAxis.stripLines[6].color = FillColors[3 % 10];
            args.chart.primaryYAxis.stripLines[7].textStyle.color = TextColor;
        };

        var labelRender = function (args) {
            seriesIndex = 0;
            getStriplineValues(args.series.name);
        };
    </script>
}
@*custom code start*@
@section Meta{
    <meta name="description" content="This example demonstrates the Keyboard navigation in ASP.NET Core Chart control. Explore here for more details." />
}
@*custom code end*@
@section ActionDescription{
    <p>
        Keyboard shortcuts can be used to interact with chart functionality. In the example, various key combinations can be used to interact with a chart.
    </p>
}
@section Description{
    <i>The key combinations listed can be used in a chart to initiate various actions:</i>
    <ul>
        <li>
            <b>FOCUS ELEMENTS</b>
            <ul>
                <li>
                    <span class="key-class"><kbd>Alt</kbd> + <kbd>J</kbd></span>
                    <span> - Moves the focus to the chart element.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Tab</kbd></span>
                    <span> - Moves the focus to the next element in the chart.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Shift</kbd> + <kbd>Tab</kbd></span>
                    <span> - Moves the focus to the previous element in the chart.</span>
                </li>
            </ul>
        </li>
        <li>
            <b>SERIES</b>
            <ul>
                <li>
                    <span class="key-class"><kbd>Down arrow</kbd></span>
                    <span> - Moves the focus to the data point on the left side of the selected point.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Up arrow</kbd></span>
                    <span> - Moves the focus to the data point on the right side of the selected point.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Left arrow</kbd></span>
                    <span> - Moves the focus to the next series in our Charts component.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Right arrow</kbd></span>
                    <span> - Moves the focus to the previous series in our Charts component.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>ESC</kbd></span>
                    <span> - Cancels the tooltip for the data point.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Enter</kbd>/<kbd>Space</kbd></span>
                    <span> - Selects the data point in the series.</span>
                </li>
            </ul>
        </li>
        <li>
            <b>Legend</b>
            <ul>
                <li>
                    <span class="key-class"><kbd>Down</kbd>/<kbd>Left arrow</kbd></span>
                    <span> - Moves the focus to the legend left of the selected legend item.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Up</kbd>/<kbd>Right arrow</kbd></span>
                    <span> - Moves the focus to the legend right of the selected legend item.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Enter</kbd>/<kbd>Space</kbd></span>
                    <span> - Toggles the visibility of the corresponding series.</span>
                </li>
            </ul>
        </li>
        <li>
            <b>ZOOMING AND PANNING</b>
            <ul>
                <li>
                    <span class="key-class"><kbd>Ctrl</kbd> + <kbd>+</kbd></span>
                    <span> - Zoom in to chart.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Ctrl</kbd> + <kbd>-</kbd></span>
                    <span> - Zoom out of the chart.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Down</kbd>/<kbd>Up arrow</kbd></span>
                    <span> - Pans the chart vertically.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Left</kbd>/<kbd>Right arrow</kbd></span>
                    <span> - Pans the chart horizontally.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>R</kbd></span>
                    <span> - Reset the zoomed chart.</span>
                </li>
            </ul>
        </li>
        <li>
            <b>PRINT</b>
            <ul>
                <li>
                    <span class="key-class"><kbd>Ctrl</kbd> + <kbd>P</kbd></span>
                    <span> - Prints the Charts component.</span>
                </li>
            </ul>
        </li>
    </ul>
}
@section Title{
    <title>ASP.NET MVC Chart Keyboard Navigation Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Print in ASP.NET MVC Chart Control</h1>
}
