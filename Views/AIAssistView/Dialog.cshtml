@using Syncfusion.EJ2.InteractiveChat
@using Syncfusion.EJ2
@using Newtonsoft.Json

@{
    var suggestions = new string[] { "How do I set daily goals in my work day?", "Steps to publish a e-book with marketing strategy" };

    var defaultPrompt = new[]
    {
        new { response = "Ask Questions, to better understand how your prompt interacts with AI-generated or default data responses..!" }
    };

    var promptsData = new[]
    {
        new { prompt = "How do I set daily goals in my work day?", response = "<p>To stay focused and productive, try these steps for setting daily goals:</p> <ol><li><strong>Identify Priorities:</strong> List the most important tasks based on deadlines or significance.</li> <li><strong>Break Down Tasks:</strong> Split larger tasks into smaller, manageable steps.</li> <li><strong>Set SMART Goals:</strong> Make sure goals are Specific, Measurable, Achievable, Relevant, and Time-bound.</li> <li><strong>Time Blocking:</strong> Allocate specific times for each task to stay organized and on track.</li></ol> <p>Would you like more tips on any of these steps?</p>", suggestionData = new List<string> { "How do I prioritize tasks effectively?", "What tools or apps can help me prioritize tasks?" } },
        new { prompt = "Steps to publish a e-book with marketing strategy", response = "<p>To publish an e-book, follow the steps below:</p> <ol><li><strong>Write and format your e-book:</strong> Ensure your content is well-organized, edited, and formatted for digital reading.</li> <li><strong>Choose a publishing platform:</strong> Platforms like Amazon Kindle Direct Publishing (KDP) or Smashwords can help you publish and distribute your e-book.</li> <li><strong>Develop a marketing strategy:</strong> Utilize social media, email newsletters, and book promotion sites to create buzz and reach your target audience.</li> <li><strong>Launch and promote:</strong> Schedule a launch date, gather reviews, and continue promoting through various channels to maintain momentum and drive sales.</li></ol> <p>Do you have a specific topic in mind for your e-book?</p>", suggestionData = new List<string>  { "How do I create an eye-catching e-book cover?", "What are common mistakes to avoid in e-book covers?" } },
        new { prompt = "How do I prioritize tasks effectively?", response = "<p>To stay focused and productive, set daily goals by:</p> <ol><li><strong>Identifying Priorities:</strong> List important tasks based on deadlines or significance.</li> <li><strong>Breaking Down Tasks:</strong> Divide larger tasks into smaller, manageable steps.</li> <li><strong>Setting SMART Goals:</strong> Ensure goals are Specific, Measurable, Achievable, Relevant, and Time-bound. </li> <li><strong>Time Blocking:</strong>Schedule specific times for each task to stay organized.</li></ol> <p> Need more tips on any of these steps? </p>", suggestionData = new List<string> { } },
        new { prompt = "What tools or apps can help me prioritize tasks?", response = "<p>Here are some tools to help you prioritize tasks effectively:</p> <ol><li><strong>Google Keep:</strong> For simple note-taking and task organization with labels and reminders.</li> <li><strong>Scoro:</strong> A project management tool for streamlining activities and team collaboration.</li> <li><strong>Evernote:</strong> Great for note-taking, to-do lists, and reminders.</li> <li><strong>Todoist:</strong> A powerful task manager for setting priorities and tracking progress.</li></ol> <p>Are you looking for tools to manage a specific type of task or project?</p>", suggestionData = new List<string> { } },
        new { prompt = "How do I create an eye-catching e-book cover?", response = "<p>Creating an eye-catching e-book cover involves a few key steps:</p> <ol><li><strong>Understand your genre and audience:</strong> Research covers of popular books in your genre to see what appeals to your target readers.</li> <li><strong>Choose the right imagery and colors:</strong> Use high-quality images and a color scheme that reflects the tone and theme of your book.</li> <li><strong>Focus on typography:</strong> Select fonts that are readable and complement the overall design. The title should be prominent and easy to read even in thumbnail size.</li> <li><strong>Use design tools or hire a professional:</strong> Tools like Canva or Adobe Spark can help you create a professional-looking cover. Alternatively, consider hiring a graphic designer for a more polished result.</li></ol> <p>Would you like some tips on where to find good images or fonts for your cover?</p>", suggestionData = new List<string> { } },
        new { prompt = "What are common mistakes to avoid in e-book covers?", response = "<p>Here are some common mistakes to avoid when designing an e-book cover:</p> <ol><li><strong>Cluttered design:</strong> Overloading the cover with too many elements can make it look messy and unprofessional. Keep it simple and focused.</li> <li><strong>Poor quality images:</strong> Using low-resolution or generic stock images can detract from the overall appeal. Always opt for high-quality, relevant visuals.</li> <li><strong>Unreadable fonts:</strong> Fancy or overly intricate fonts can be hard to read, especially in thumbnail size. Choose clear, legible fonts for the title and author name.</li> <li><strong>Ignoring genre conventions:</strong> Each genre has its own visual cues. Not adhering to these can confuse potential readers about the bookï¿½s content.</li> <li><strong>Inconsistent branding:</strong> If you have a series or multiple books, ensure a consistent style across all covers to build a recognizable brand.</li></ol> <p>Would you like any specific advice on designing your cover?</p>", suggestionData = new List<string> { } },
    };

    var promptsJson = @Html.Raw(JsonConvert.SerializeObject(promptsData));
    var suggestionsJson = @Html.Raw(JsonConvert.SerializeObject(suggestions));
}

@section ControlsSection{
    <div class="control-section">
        <div class="dialog-aiassistview">
            @Html.EJS().Splitter("splitter").Height("600px").PaneSettings(paneItem =>
            {
                paneItem.Size("22%").Resizable(false).ContentTemplate(
                    @<div class="left-content">
                        <div class="header">Quick Notes</div>
                        <hr />
                        <div class="content e-card">
                            <div class="note-title">
                                <div class="heading">Planning and Requirements</div>
                                <div class="sub-heading">Outline the process of gathering input from stakeholders</div>
                            </div>
                            <div class="note-title e-skeleton e-skeleton-text">
                                <div class="heading">Meeting with Stakeholders</div>
                                <div class="sub-heading">Discuss strategies for conducting productive meetings with stakeholders</div>
                            </div>
                            <div class="note-title">
                                <div class="heading">Risk Management and Problem-Solving</div>
                                <div class="sub-heading">Offer tips on how to proactively manage challenges, including regular</div>
                            </div>
                            <div class="note-title">
                                <div class="heading e-skeleton e-skeleton-text"></div>
                                <div class="sub-heading e-skeleton e-skeleton-text"></div>
                            </div>
                            <div class="note-title">
                                <div class="heading e-skeleton e-skeleton-text"></div>
                            </div>
                        </div>
                    </div>
                ).Add();
                paneItem.Size("50%").Resizable(false).ContentTemplate(
                    @<div class="right-content">
                        <div class="heading">Meeting with Stakeholders</div>
                        <hr />
                        <div class="date-info">Tuesday, August 27, 2024</div>
                        <div class="content e-card" contenteditable="true">
                            <i><mark>(Open AI Assist, generate a response, and click 'Copy' from the toolbar item to get it updated here.)</mark></i>
                            Discuss strategies for conducting productive meetings with stakeholders. <br />
                            Highlight the significance of setting clear agendas, defining outcomes, and maintaining open communication. <br />
                        </div>
                    </div>
                ).Add();
            }).Render()
        </div>
        <div id="dialogElement">
            @Html.EJS().AIAssistView("aiAssistView").ToolbarSettings(new AIAssistViewToolbarSettings()
            {
                Items = ViewBag.ToolbarItems, ItemClicked = "toolbarItemClicked"
            }).PromptSuggestions(suggestions).PromptRequest("onPromptRequest").ResponseToolbarSettings(new AIAssistViewResponseToolbarSettings()
            {
                ItemClicked = "toolbarItemClicked"
            }).Created("onCreated").BannerTemplate("#bannerContent").CssClass("custom-aiassistview").Render()
        </div>
        <button id="fabElem"></button>
    </div>
    @*custom code start*@
    <style>
        .dialog-aiassistview {
            width: 50vw;
            height: 600px;
            margin: 0 auto;
            display: flex;
            align-items: center;
            position: relative;
        }

        .dialog-aiassistview .banner-content .e-assistview-icon:before {
            font-size: 35px;
        }

        .dialog-aiassistview .banner-content {
            display: flex;
            flex-direction: column;
            justify-content: center;
            height: 300px;
            text-align: center;
        }

        .dialog-aiassistview .left-content .header {
            font-size: 18px;
            font-weight: 500;
            padding: 10px 15px 5px;
        }

        .dialog-aiassistview .e-card:hover {
            background: none;
        }

        .dialog-aiassistview .left-content .content {
            height: 80%;
            justify-content: flex-start;
            border: none;
            box-shadow: none;
            padding-left: 3px;
            background: inherit;
        }

        .dialog-aiassistview .right-content .content {
            height: 100%;
            justify-content: flex-start;
            border: none;
            box-shadow: none;
            margin-top: 20px;
            font-size: 12px;
            overflow: auto;
            line-height: 25px;
            background: inherit;
        }

        .dialog-aiassistview .note-title {
            display: flex;
            flex-direction: column;
            white-space: nowrap;
            padding: 5px 10px;
        }

        .dialog-aiassistview .note-title .heading,
        .dialog-aiassistview .note-title .sub-heading {
            text-overflow: ellipsis;
            white-space: nowrap;
            overflow: hidden;
            line-height: 25px;
        }

        .dialog-aiassistview .note-title .heading {
            font-weight: 400;
        }

        .dialog-aiassistview .note-title .sub-heading {
            font-size: 10px;
            line-height: 15px;
        }

        .dialog-aiassistview .note-title .heading.e-skeleton {
            height: 13px;
            width: 100%;
            margin-bottom: 7px;
        }

        .dialog-aiassistview .note-title .sub-heading.e-skeleton {
            height: 12px;
            width: 80%;
        }

        .dialog-aiassistview hr {
            margin: 0 0 0 2px;
        }

        .dialog-aiassistview .right-content {
            display: flex;
            flex-direction: column;
            padding: 15px 0 15px 20px;
            gap: 5px;
        }

        .dialog-aiassistview .right-content .heading {
            font-size: 20px;
        }

        .dialog-aiassistview .right-content .date-info {
            font-size: 10px;
        }

        .dialog-aiassistview #fabElem {
            z-index: 9999;
        }

        .dialog-aiassistview .custom-dialog .e-dlg-content {
            padding: 0;
        }

        .dialog-aiassistview .custom-aiassistview {
            border: none;
        }

        body[class*="fluent2-highcontrast"] .dialog-aiassistview .e-card {
            color: #8c8c8c;
        }

        @@media only screen and (max-width: 850px) {
            .dialog-aiassistview {
                width: 100%;
            }
        }
    </style>
    @*custom code end*@
}

@section PreScripts {
    <script>
        var assistObj;
        var fabObj;
        var dialog;
        var prompts = @Html.Raw(promptsJson);
        var suggestions = @Html.Raw(suggestionsJson);
        function onCreated() {
            assistObj = this;
            dialog = new ej.popups.Dialog({
                content: document.getElementById('#aiAssistView'),
                target: '.dialog-aiassistview',
                width: '440px',
                height: '100%',
                visible: false,
                cssClass: 'custom-dialog'
            });
            dialog.appendTo('#dialogElement');
            fabObj  = new ej.buttons.Fab({
                iconCss: 'e-icons e-assistview-icon',
                content: 'AI Assist',
                target: '.dialog-aiassistview'
            });
            fabObj.appendTo('#fabElem');
            fabObj.element.onclick = function () {
                dialogOpenClose();
            };
        }

        function dialogOpenClose() {
            dialog.visible = !dialog.visible;
        }
        
        function onPromptRequest(args) {
            setTimeout(function () {
                var foundPrompt = prompts.find((promptObj) => promptObj.prompt === args.prompt);
                var defaultResponse = 'For real-time prompt processing, connect the AI AssistView control to your preferred AI service, such as OpenAI or Azure Cognitive Services. Ensure you obtain the necessary API credentials to authenticate and enable seamless integration.';
                assistObj.addPromptResponse(foundPrompt ? foundPrompt.response : defaultResponse);
                assistObj.promptSuggestions = foundPrompt?.suggestions || suggestions;
            }, 2000);
        }

        function toolbarItemClicked(args) {
            if (args.item.iconCss === 'e-icons e-close') {
                dialogOpenClose();
            }
            if (args.item.iconCss === 'e-icons e-assist-copy') {
                var targetElem = document.querySelector('.right-content .content');
                var response = assistObj.prompts[args.dataIndex].response;
                if (targetElem) {
                    targetElem.innerHTML += response + '<br />';
                    dialogOpenClose();
                }
            }
        }
    </script>
    <script id="bannerContent" type="text/x-jsrender">
        <div class="banner-content">
            <div class="e-icons e-assistview-icon"></div>
            <h3>AI Assistance</h3>
            <i>To get started, provide input or choose a suggestion.</i>
        </div>
    </script>
}

@section Meta{
    <meta name="description" content="This example demonstrates the Overview in ASP.NET MVC AI AssistView control. Explore here for more details." />
}
@section ActionDescription{
    <div id="action-description">
        <p>This example showcases the integration of AI AssistView within the Syncfusion dialog control, allowing you to display generated responses in the notes view.</p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this example, the AI AssistView is shown inside a dialog control, which opens with a floating action button (FAB) click.
            It uses predefined <code>promptSuggestions</code> that are displayed based on user configuration and a custom toolbar item as a close icon to close the dialog.
            The <code>promptRequest</code> event finds matching prompts and displays the responses.
        </p>
    </div>
}
@section Title{
    <title>ASP.NET MVC AI AssistView Overview Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Overview in ASP.NET MVC AI AssistView Control</h1>
}